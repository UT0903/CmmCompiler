Useless nonterminals

   test


Terminals which are not used

   IF
   ELSE
   WHILE
   MK_DOT
   ERROR


Useless rules

  101 test: assign_expr


Grammar

    0 $accept: program $end

    1 program: global_decl_list
    2        | /* empty */

    3 global_decl_list: global_decl_list global_decl
    4                 | global_decl

    5 global_decl: decl_list function_decl
    6            | function_decl

    7 function_decl: type ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE
    8              | VOID ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE
    9              | type ID MK_LPAREN MK_RPAREN MK_LBRACE block MK_RBRACE
   10              | VOID ID MK_LPAREN MK_RPAREN MK_LBRACE block MK_RBRACE

   11 param_list: param_list MK_COMMA param
   12           | param

   13 param: type ID
   14      | type ID dim_fn

   15 dim_fn: MK_LB expr_null MK_RB
   16       | dim_fn MK_LB expr MK_RB

   17 expr_null: expr
   18          | /* empty */

   19 block: decl_list stmt_list
   20      | stmt_list
   21      | decl_list
   22      | /* empty */

   23 decl_list: decl_list decl
   24          | decl

   25 decl: type_decl
   26     | var_decl

   27 type_decl: TYPEDEF type id_list MK_SEMICOLON
   28          | TYPEDEF VOID id_list MK_SEMICOLON

   29 var_decl: type init_id_list MK_SEMICOLON
   30         | ID id_list MK_SEMICOLON

   31 type: INT
   32     | FLOAT

   33 id_list: ID
   34        | id_list MK_COMMA ID
   35        | id_list MK_COMMA ID dim_decl
   36        | ID dim_decl

   37 dim_decl: MK_LB cexpr MK_RB

   38 cexpr: cexpr OP_PLUS mcexpr
   39      | cexpr OP_MINUS mcexpr
   40      | mcexpr

   41 mcexpr: mcexpr OP_TIMES cfactor
   42       | mcexpr OP_DIVIDE cfactor
   43       | cfactor

   44 cfactor: CONST
   45        | MK_LPAREN cexpr MK_RPAREN

   46 init_id_list: init_id
   47             | init_id_list MK_COMMA init_id

   48 init_id: ID
   49        | ID dim_decl
   50        | ID OP_ASSIGN relop_expr

   51 stmt_list: stmt_list stmt
   52          | stmt

   53 stmt: MK_LBRACE block MK_RBRACE
   54     | FOR MK_LPAREN assign_expr_list MK_SEMICOLON relop_expr_list MK_SEMICOLON assign_expr_list MK_RPAREN stmt
   55     | var_ref OP_ASSIGN relop_expr MK_SEMICOLON
   56     | MK_SEMICOLON
   57     | RETURN MK_SEMICOLON
   58     | RETURN relop_expr MK_SEMICOLON

   59 assign_expr_list: nonempty_assign_expr_list
   60                 | /* empty */

   61 nonempty_assign_expr_list: nonempty_assign_expr_list MK_COMMA assign_expr
   62                          | assign_expr

   63 assign_expr: ID OP_ASSIGN relop_expr
   64            | relop_expr

   65 relop_expr: relop_term
   66           | relop_expr OP_OR relop_term

   67 relop_term: relop_factor
   68           | relop_term OP_AND relop_factor

   69 relop_factor: expr
   70             | expr rel_op expr

   71 rel_op: OP_EQ
   72       | OP_GE
   73       | OP_LE
   74       | OP_NE
   75       | OP_GT
   76       | OP_LT

   77 relop_expr_list: nonempty_relop_expr_list
   78                | /* empty */

   79 nonempty_relop_expr_list: nonempty_relop_expr_list MK_COMMA relop_expr
   80                         | relop_expr

   81 expr: expr add_op term
   82     | term

   83 add_op: OP_PLUS
   84       | OP_MINUS

   85 term: term mul_op factor
   86     | factor

   87 mul_op: OP_TIMES
   88       | OP_DIVIDE

   89 factor: MK_LPAREN relop_expr MK_RPAREN
   90       | OP_NOT MK_LPAREN relop_expr MK_RPAREN
   91       | CONST
   92       | OP_NOT CONST
   93       | ID MK_LPAREN relop_expr_list MK_RPAREN
   94       | OP_NOT ID MK_LPAREN relop_expr_list MK_RPAREN
   95       | var_ref
   96       | OP_NOT var_ref

   97 var_ref: ID
   98        | ID dim_list

   99 dim_list: dim_list MK_LB expr MK_RB
  100         | MK_LB expr MK_RB


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 7 8 9 10 13 14 30 33 34 35 36 48 49 50 63 93 94 97 98
CONST (259) 44 91 92
VOID (260) 8 10 28
INT (261) 31
FLOAT (262) 32
IF (263)
ELSE (264)
WHILE (265)
FOR (266) 54
TYPEDEF (267) 27 28
OP_ASSIGN (268) 50 55 63
OP_OR (269) 66
OP_AND (270) 68
OP_NOT (271) 90 92 94 96
OP_EQ (272) 71
OP_NE (273) 74
OP_GT (274) 75
OP_LT (275) 76
OP_GE (276) 72
OP_LE (277) 73
OP_PLUS (278) 38 83
OP_MINUS (279) 39 84
OP_TIMES (280) 41 87
OP_DIVIDE (281) 42 88
MK_LB (282) 15 16 37 99 100
MK_RB (283) 15 16 37 99 100
MK_LPAREN (284) 7 8 9 10 45 54 89 90 93 94
MK_RPAREN (285) 7 8 9 10 45 54 89 90 93 94
MK_LBRACE (286) 7 8 9 10 53
MK_RBRACE (287) 7 8 9 10 53
MK_COMMA (288) 11 34 35 47 61 79
MK_SEMICOLON (289) 27 28 29 30 54 55 56 57 58
MK_DOT (290)
ERROR (291)
RETURN (292) 57 58


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
program (39)
    on left: 1 2, on right: 0
global_decl_list (40)
    on left: 3 4, on right: 1 3
global_decl (41)
    on left: 5 6, on right: 3 4
function_decl (42)
    on left: 7 8 9 10, on right: 5 6
param_list (43)
    on left: 11 12, on right: 7 8 11
param (44)
    on left: 13 14, on right: 11 12
dim_fn (45)
    on left: 15 16, on right: 14 16
expr_null (46)
    on left: 17 18, on right: 15
block (47)
    on left: 19 20 21 22, on right: 7 8 9 10 53
decl_list (48)
    on left: 23 24, on right: 5 19 21 23
decl (49)
    on left: 25 26, on right: 23 24
type_decl (50)
    on left: 27 28, on right: 25
var_decl (51)
    on left: 29 30, on right: 26
type (52)
    on left: 31 32, on right: 7 9 13 14 27 29
id_list (53)
    on left: 33 34 35 36, on right: 27 28 30 34 35
dim_decl (54)
    on left: 37, on right: 35 36 49
cexpr (55)
    on left: 38 39 40, on right: 37 38 39 45
mcexpr (56)
    on left: 41 42 43, on right: 38 39 40 41 42
cfactor (57)
    on left: 44 45, on right: 41 42 43
init_id_list (58)
    on left: 46 47, on right: 29 47
init_id (59)
    on left: 48 49 50, on right: 46 47
stmt_list (60)
    on left: 51 52, on right: 19 20 51
stmt (61)
    on left: 53 54 55 56 57 58, on right: 51 52 54
assign_expr_list (62)
    on left: 59 60, on right: 54
nonempty_assign_expr_list (63)
    on left: 61 62, on right: 59 61
assign_expr (64)
    on left: 63 64, on right: 61 62
relop_expr (65)
    on left: 65 66, on right: 50 55 58 63 64 66 79 80 89 90
relop_term (66)
    on left: 67 68, on right: 65 66 68
relop_factor (67)
    on left: 69 70, on right: 67 68
rel_op (68)
    on left: 71 72 73 74 75 76, on right: 70
relop_expr_list (69)
    on left: 77 78, on right: 54 93 94
nonempty_relop_expr_list (70)
    on left: 79 80, on right: 77 79
expr (71)
    on left: 81 82, on right: 16 17 69 70 81 99 100
add_op (72)
    on left: 83 84, on right: 81
term (73)
    on left: 85 86, on right: 81 82 85
mul_op (74)
    on left: 87 88, on right: 85
factor (75)
    on left: 89 90 91 92 93 94 95 96, on right: 85 86
var_ref (76)
    on left: 97 98, on right: 55 95 96
dim_list (77)
    on left: 99 100, on right: 98 99


state 0

    0 $accept: . program $end

    ID       shift, and go to state 1
    VOID     shift, and go to state 2
    INT      shift, and go to state 3
    FLOAT    shift, and go to state 4
    TYPEDEF  shift, and go to state 5

    $default  reduce using rule 2 (program)

    program           go to state 6
    global_decl_list  go to state 7
    global_decl       go to state 8
    function_decl     go to state 9
    decl_list         go to state 10
    decl              go to state 11
    type_decl         go to state 12
    var_decl          go to state 13
    type              go to state 14


state 1

   30 var_decl: ID . id_list MK_SEMICOLON

    ID  shift, and go to state 15

    id_list  go to state 16


state 2

    8 function_decl: VOID . ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE
   10              | VOID . ID MK_LPAREN MK_RPAREN MK_LBRACE block MK_RBRACE

    ID  shift, and go to state 17


state 3

   31 type: INT .

    $default  reduce using rule 31 (type)


state 4

   32 type: FLOAT .

    $default  reduce using rule 32 (type)


state 5

   27 type_decl: TYPEDEF . type id_list MK_SEMICOLON
   28          | TYPEDEF . VOID id_list MK_SEMICOLON

    VOID   shift, and go to state 18
    INT    shift, and go to state 3
    FLOAT  shift, and go to state 4

    type  go to state 19


state 6

    0 $accept: program . $end

    $end  shift, and go to state 20


state 7

    1 program: global_decl_list .
    3 global_decl_list: global_decl_list . global_decl

    ID       shift, and go to state 1
    VOID     shift, and go to state 2
    INT      shift, and go to state 3
    FLOAT    shift, and go to state 4
    TYPEDEF  shift, and go to state 5

    $default  reduce using rule 1 (program)

    global_decl    go to state 21
    function_decl  go to state 9
    decl_list      go to state 10
    decl           go to state 11
    type_decl      go to state 12
    var_decl       go to state 13
    type           go to state 14


state 8

    4 global_decl_list: global_decl .

    $default  reduce using rule 4 (global_decl_list)


state 9

    6 global_decl: function_decl .

    $default  reduce using rule 6 (global_decl)


state 10

    5 global_decl: decl_list . function_decl
   23 decl_list: decl_list . decl

    ID       shift, and go to state 1
    VOID     shift, and go to state 2
    INT      shift, and go to state 3
    FLOAT    shift, and go to state 4
    TYPEDEF  shift, and go to state 5

    function_decl  go to state 22
    decl           go to state 23
    type_decl      go to state 12
    var_decl       go to state 13
    type           go to state 14


state 11

   24 decl_list: decl .

    $default  reduce using rule 24 (decl_list)


state 12

   25 decl: type_decl .

    $default  reduce using rule 25 (decl)


state 13

   26 decl: var_decl .

    $default  reduce using rule 26 (decl)


state 14

    7 function_decl: type . ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE
    9              | type . ID MK_LPAREN MK_RPAREN MK_LBRACE block MK_RBRACE
   29 var_decl: type . init_id_list MK_SEMICOLON

    ID  shift, and go to state 24

    init_id_list  go to state 25
    init_id       go to state 26


state 15

   33 id_list: ID .
   36        | ID . dim_decl

    MK_LB  shift, and go to state 27

    $default  reduce using rule 33 (id_list)

    dim_decl  go to state 28


state 16

   30 var_decl: ID id_list . MK_SEMICOLON
   34 id_list: id_list . MK_COMMA ID
   35        | id_list . MK_COMMA ID dim_decl

    MK_COMMA      shift, and go to state 29
    MK_SEMICOLON  shift, and go to state 30


state 17

    8 function_decl: VOID ID . MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE
   10              | VOID ID . MK_LPAREN MK_RPAREN MK_LBRACE block MK_RBRACE

    MK_LPAREN  shift, and go to state 31


state 18

   28 type_decl: TYPEDEF VOID . id_list MK_SEMICOLON

    ID  shift, and go to state 15

    id_list  go to state 32


state 19

   27 type_decl: TYPEDEF type . id_list MK_SEMICOLON

    ID  shift, and go to state 15

    id_list  go to state 33


state 20

    0 $accept: program $end .

    $default  accept


state 21

    3 global_decl_list: global_decl_list global_decl .

    $default  reduce using rule 3 (global_decl_list)


state 22

    5 global_decl: decl_list function_decl .

    $default  reduce using rule 5 (global_decl)


state 23

   23 decl_list: decl_list decl .

    $default  reduce using rule 23 (decl_list)


state 24

    7 function_decl: type ID . MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE
    9              | type ID . MK_LPAREN MK_RPAREN MK_LBRACE block MK_RBRACE
   48 init_id: ID .
   49        | ID . dim_decl
   50        | ID . OP_ASSIGN relop_expr

    OP_ASSIGN  shift, and go to state 34
    MK_LB      shift, and go to state 27
    MK_LPAREN  shift, and go to state 35

    $default  reduce using rule 48 (init_id)

    dim_decl  go to state 36


state 25

   29 var_decl: type init_id_list . MK_SEMICOLON
   47 init_id_list: init_id_list . MK_COMMA init_id

    MK_COMMA      shift, and go to state 37
    MK_SEMICOLON  shift, and go to state 38


state 26

   46 init_id_list: init_id .

    $default  reduce using rule 46 (init_id_list)


state 27

   37 dim_decl: MK_LB . cexpr MK_RB

    CONST      shift, and go to state 39
    MK_LPAREN  shift, and go to state 40

    cexpr    go to state 41
    mcexpr   go to state 42
    cfactor  go to state 43


state 28

   36 id_list: ID dim_decl .

    $default  reduce using rule 36 (id_list)


state 29

   34 id_list: id_list MK_COMMA . ID
   35        | id_list MK_COMMA . ID dim_decl

    ID  shift, and go to state 44


state 30

   30 var_decl: ID id_list MK_SEMICOLON .

    $default  reduce using rule 30 (var_decl)


state 31

    8 function_decl: VOID ID MK_LPAREN . param_list MK_RPAREN MK_LBRACE block MK_RBRACE
   10              | VOID ID MK_LPAREN . MK_RPAREN MK_LBRACE block MK_RBRACE

    INT        shift, and go to state 3
    FLOAT      shift, and go to state 4
    MK_RPAREN  shift, and go to state 45

    param_list  go to state 46
    param       go to state 47
    type        go to state 48


state 32

   28 type_decl: TYPEDEF VOID id_list . MK_SEMICOLON
   34 id_list: id_list . MK_COMMA ID
   35        | id_list . MK_COMMA ID dim_decl

    MK_COMMA      shift, and go to state 29
    MK_SEMICOLON  shift, and go to state 49


state 33

   27 type_decl: TYPEDEF type id_list . MK_SEMICOLON
   34 id_list: id_list . MK_COMMA ID
   35        | id_list . MK_COMMA ID dim_decl

    MK_COMMA      shift, and go to state 29
    MK_SEMICOLON  shift, and go to state 50


state 34

   50 init_id: ID OP_ASSIGN . relop_expr

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    relop_expr    go to state 55
    relop_term    go to state 56
    relop_factor  go to state 57
    expr          go to state 58
    term          go to state 59
    factor        go to state 60
    var_ref       go to state 61


state 35

    7 function_decl: type ID MK_LPAREN . param_list MK_RPAREN MK_LBRACE block MK_RBRACE
    9              | type ID MK_LPAREN . MK_RPAREN MK_LBRACE block MK_RBRACE

    INT        shift, and go to state 3
    FLOAT      shift, and go to state 4
    MK_RPAREN  shift, and go to state 62

    param_list  go to state 63
    param       go to state 47
    type        go to state 48


state 36

   49 init_id: ID dim_decl .

    $default  reduce using rule 49 (init_id)


state 37

   47 init_id_list: init_id_list MK_COMMA . init_id

    ID  shift, and go to state 64

    init_id  go to state 65


state 38

   29 var_decl: type init_id_list MK_SEMICOLON .

    $default  reduce using rule 29 (var_decl)


state 39

   44 cfactor: CONST .

    $default  reduce using rule 44 (cfactor)


state 40

   45 cfactor: MK_LPAREN . cexpr MK_RPAREN

    CONST      shift, and go to state 39
    MK_LPAREN  shift, and go to state 40

    cexpr    go to state 66
    mcexpr   go to state 42
    cfactor  go to state 43


state 41

   37 dim_decl: MK_LB cexpr . MK_RB
   38 cexpr: cexpr . OP_PLUS mcexpr
   39      | cexpr . OP_MINUS mcexpr

    OP_PLUS   shift, and go to state 67
    OP_MINUS  shift, and go to state 68
    MK_RB     shift, and go to state 69


state 42

   40 cexpr: mcexpr .
   41 mcexpr: mcexpr . OP_TIMES cfactor
   42       | mcexpr . OP_DIVIDE cfactor

    OP_TIMES   shift, and go to state 70
    OP_DIVIDE  shift, and go to state 71

    $default  reduce using rule 40 (cexpr)


state 43

   43 mcexpr: cfactor .

    $default  reduce using rule 43 (mcexpr)


state 44

   34 id_list: id_list MK_COMMA ID .
   35        | id_list MK_COMMA ID . dim_decl

    MK_LB  shift, and go to state 27

    $default  reduce using rule 34 (id_list)

    dim_decl  go to state 72


state 45

   10 function_decl: VOID ID MK_LPAREN MK_RPAREN . MK_LBRACE block MK_RBRACE

    MK_LBRACE  shift, and go to state 73


state 46

    8 function_decl: VOID ID MK_LPAREN param_list . MK_RPAREN MK_LBRACE block MK_RBRACE
   11 param_list: param_list . MK_COMMA param

    MK_RPAREN  shift, and go to state 74
    MK_COMMA   shift, and go to state 75


state 47

   12 param_list: param .

    $default  reduce using rule 12 (param_list)


state 48

   13 param: type . ID
   14      | type . ID dim_fn

    ID  shift, and go to state 76


state 49

   28 type_decl: TYPEDEF VOID id_list MK_SEMICOLON .

    $default  reduce using rule 28 (type_decl)


state 50

   27 type_decl: TYPEDEF type id_list MK_SEMICOLON .

    $default  reduce using rule 27 (type_decl)


state 51

   93 factor: ID . MK_LPAREN relop_expr_list MK_RPAREN
   97 var_ref: ID .
   98        | ID . dim_list

    MK_LB      shift, and go to state 77
    MK_LPAREN  shift, and go to state 78

    $default  reduce using rule 97 (var_ref)

    dim_list  go to state 79


state 52

   91 factor: CONST .

    $default  reduce using rule 91 (factor)


state 53

   90 factor: OP_NOT . MK_LPAREN relop_expr MK_RPAREN
   92       | OP_NOT . CONST
   94       | OP_NOT . ID MK_LPAREN relop_expr_list MK_RPAREN
   96       | OP_NOT . var_ref

    ID         shift, and go to state 80
    CONST      shift, and go to state 81
    MK_LPAREN  shift, and go to state 82

    var_ref  go to state 83


state 54

   89 factor: MK_LPAREN . relop_expr MK_RPAREN

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    relop_expr    go to state 84
    relop_term    go to state 56
    relop_factor  go to state 57
    expr          go to state 58
    term          go to state 59
    factor        go to state 60
    var_ref       go to state 61


state 55

   50 init_id: ID OP_ASSIGN relop_expr .
   66 relop_expr: relop_expr . OP_OR relop_term

    OP_OR  shift, and go to state 85

    $default  reduce using rule 50 (init_id)


state 56

   65 relop_expr: relop_term .
   68 relop_term: relop_term . OP_AND relop_factor

    OP_AND  shift, and go to state 86

    $default  reduce using rule 65 (relop_expr)


state 57

   67 relop_term: relop_factor .

    $default  reduce using rule 67 (relop_term)


state 58

   69 relop_factor: expr .
   70             | expr . rel_op expr
   81 expr: expr . add_op term

    OP_EQ     shift, and go to state 87
    OP_NE     shift, and go to state 88
    OP_GT     shift, and go to state 89
    OP_LT     shift, and go to state 90
    OP_GE     shift, and go to state 91
    OP_LE     shift, and go to state 92
    OP_PLUS   shift, and go to state 93
    OP_MINUS  shift, and go to state 94

    $default  reduce using rule 69 (relop_factor)

    rel_op  go to state 95
    add_op  go to state 96


state 59

   82 expr: term .
   85 term: term . mul_op factor

    OP_TIMES   shift, and go to state 97
    OP_DIVIDE  shift, and go to state 98

    $default  reduce using rule 82 (expr)

    mul_op  go to state 99


state 60

   86 term: factor .

    $default  reduce using rule 86 (term)


state 61

   95 factor: var_ref .

    $default  reduce using rule 95 (factor)


state 62

    9 function_decl: type ID MK_LPAREN MK_RPAREN . MK_LBRACE block MK_RBRACE

    MK_LBRACE  shift, and go to state 100


state 63

    7 function_decl: type ID MK_LPAREN param_list . MK_RPAREN MK_LBRACE block MK_RBRACE
   11 param_list: param_list . MK_COMMA param

    MK_RPAREN  shift, and go to state 101
    MK_COMMA   shift, and go to state 75


state 64

   48 init_id: ID .
   49        | ID . dim_decl
   50        | ID . OP_ASSIGN relop_expr

    OP_ASSIGN  shift, and go to state 34
    MK_LB      shift, and go to state 27

    $default  reduce using rule 48 (init_id)

    dim_decl  go to state 36


state 65

   47 init_id_list: init_id_list MK_COMMA init_id .

    $default  reduce using rule 47 (init_id_list)


state 66

   38 cexpr: cexpr . OP_PLUS mcexpr
   39      | cexpr . OP_MINUS mcexpr
   45 cfactor: MK_LPAREN cexpr . MK_RPAREN

    OP_PLUS    shift, and go to state 67
    OP_MINUS   shift, and go to state 68
    MK_RPAREN  shift, and go to state 102


state 67

   38 cexpr: cexpr OP_PLUS . mcexpr

    CONST      shift, and go to state 39
    MK_LPAREN  shift, and go to state 40

    mcexpr   go to state 103
    cfactor  go to state 43


state 68

   39 cexpr: cexpr OP_MINUS . mcexpr

    CONST      shift, and go to state 39
    MK_LPAREN  shift, and go to state 40

    mcexpr   go to state 104
    cfactor  go to state 43


state 69

   37 dim_decl: MK_LB cexpr MK_RB .

    $default  reduce using rule 37 (dim_decl)


state 70

   41 mcexpr: mcexpr OP_TIMES . cfactor

    CONST      shift, and go to state 39
    MK_LPAREN  shift, and go to state 40

    cfactor  go to state 105


state 71

   42 mcexpr: mcexpr OP_DIVIDE . cfactor

    CONST      shift, and go to state 39
    MK_LPAREN  shift, and go to state 40

    cfactor  go to state 106


state 72

   35 id_list: id_list MK_COMMA ID dim_decl .

    $default  reduce using rule 35 (id_list)


state 73

   10 function_decl: VOID ID MK_LPAREN MK_RPAREN MK_LBRACE . block MK_RBRACE

    ID            shift, and go to state 107
    INT           shift, and go to state 3
    FLOAT         shift, and go to state 4
    FOR           shift, and go to state 108
    TYPEDEF       shift, and go to state 5
    MK_LBRACE     shift, and go to state 109
    MK_SEMICOLON  shift, and go to state 110
    RETURN        shift, and go to state 111

    $default  reduce using rule 22 (block)

    block      go to state 112
    decl_list  go to state 113
    decl       go to state 11
    type_decl  go to state 12
    var_decl   go to state 13
    type       go to state 114
    stmt_list  go to state 115
    stmt       go to state 116
    var_ref    go to state 117


state 74

    8 function_decl: VOID ID MK_LPAREN param_list MK_RPAREN . MK_LBRACE block MK_RBRACE

    MK_LBRACE  shift, and go to state 118


state 75

   11 param_list: param_list MK_COMMA . param

    INT    shift, and go to state 3
    FLOAT  shift, and go to state 4

    param  go to state 119
    type   go to state 48


state 76

   13 param: type ID .
   14      | type ID . dim_fn

    MK_LB  shift, and go to state 120

    $default  reduce using rule 13 (param)

    dim_fn  go to state 121


state 77

  100 dim_list: MK_LB . expr MK_RB

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    expr     go to state 122
    term     go to state 59
    factor   go to state 60
    var_ref  go to state 61


state 78

   93 factor: ID MK_LPAREN . relop_expr_list MK_RPAREN

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    $default  reduce using rule 78 (relop_expr_list)

    relop_expr                go to state 123
    relop_term                go to state 56
    relop_factor              go to state 57
    relop_expr_list           go to state 124
    nonempty_relop_expr_list  go to state 125
    expr                      go to state 58
    term                      go to state 59
    factor                    go to state 60
    var_ref                   go to state 61


state 79

   98 var_ref: ID dim_list .
   99 dim_list: dim_list . MK_LB expr MK_RB

    MK_LB  shift, and go to state 126

    $default  reduce using rule 98 (var_ref)


state 80

   94 factor: OP_NOT ID . MK_LPAREN relop_expr_list MK_RPAREN
   97 var_ref: ID .
   98        | ID . dim_list

    MK_LB      shift, and go to state 77
    MK_LPAREN  shift, and go to state 127

    $default  reduce using rule 97 (var_ref)

    dim_list  go to state 79


state 81

   92 factor: OP_NOT CONST .

    $default  reduce using rule 92 (factor)


state 82

   90 factor: OP_NOT MK_LPAREN . relop_expr MK_RPAREN

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    relop_expr    go to state 128
    relop_term    go to state 56
    relop_factor  go to state 57
    expr          go to state 58
    term          go to state 59
    factor        go to state 60
    var_ref       go to state 61


state 83

   96 factor: OP_NOT var_ref .

    $default  reduce using rule 96 (factor)


state 84

   66 relop_expr: relop_expr . OP_OR relop_term
   89 factor: MK_LPAREN relop_expr . MK_RPAREN

    OP_OR      shift, and go to state 85
    MK_RPAREN  shift, and go to state 129


state 85

   66 relop_expr: relop_expr OP_OR . relop_term

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    relop_term    go to state 130
    relop_factor  go to state 57
    expr          go to state 58
    term          go to state 59
    factor        go to state 60
    var_ref       go to state 61


state 86

   68 relop_term: relop_term OP_AND . relop_factor

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    relop_factor  go to state 131
    expr          go to state 58
    term          go to state 59
    factor        go to state 60
    var_ref       go to state 61


state 87

   71 rel_op: OP_EQ .

    $default  reduce using rule 71 (rel_op)


state 88

   74 rel_op: OP_NE .

    $default  reduce using rule 74 (rel_op)


state 89

   75 rel_op: OP_GT .

    $default  reduce using rule 75 (rel_op)


state 90

   76 rel_op: OP_LT .

    $default  reduce using rule 76 (rel_op)


state 91

   72 rel_op: OP_GE .

    $default  reduce using rule 72 (rel_op)


state 92

   73 rel_op: OP_LE .

    $default  reduce using rule 73 (rel_op)


state 93

   83 add_op: OP_PLUS .

    $default  reduce using rule 83 (add_op)


state 94

   84 add_op: OP_MINUS .

    $default  reduce using rule 84 (add_op)


state 95

   70 relop_factor: expr rel_op . expr

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    expr     go to state 132
    term     go to state 59
    factor   go to state 60
    var_ref  go to state 61


state 96

   81 expr: expr add_op . term

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    term     go to state 133
    factor   go to state 60
    var_ref  go to state 61


state 97

   87 mul_op: OP_TIMES .

    $default  reduce using rule 87 (mul_op)


state 98

   88 mul_op: OP_DIVIDE .

    $default  reduce using rule 88 (mul_op)


state 99

   85 term: term mul_op . factor

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    factor   go to state 134
    var_ref  go to state 61


state 100

    9 function_decl: type ID MK_LPAREN MK_RPAREN MK_LBRACE . block MK_RBRACE

    ID            shift, and go to state 107
    INT           shift, and go to state 3
    FLOAT         shift, and go to state 4
    FOR           shift, and go to state 108
    TYPEDEF       shift, and go to state 5
    MK_LBRACE     shift, and go to state 109
    MK_SEMICOLON  shift, and go to state 110
    RETURN        shift, and go to state 111

    $default  reduce using rule 22 (block)

    block      go to state 135
    decl_list  go to state 113
    decl       go to state 11
    type_decl  go to state 12
    var_decl   go to state 13
    type       go to state 114
    stmt_list  go to state 115
    stmt       go to state 116
    var_ref    go to state 117


state 101

    7 function_decl: type ID MK_LPAREN param_list MK_RPAREN . MK_LBRACE block MK_RBRACE

    MK_LBRACE  shift, and go to state 136


state 102

   45 cfactor: MK_LPAREN cexpr MK_RPAREN .

    $default  reduce using rule 45 (cfactor)


state 103

   38 cexpr: cexpr OP_PLUS mcexpr .
   41 mcexpr: mcexpr . OP_TIMES cfactor
   42       | mcexpr . OP_DIVIDE cfactor

    OP_TIMES   shift, and go to state 70
    OP_DIVIDE  shift, and go to state 71

    $default  reduce using rule 38 (cexpr)


state 104

   39 cexpr: cexpr OP_MINUS mcexpr .
   41 mcexpr: mcexpr . OP_TIMES cfactor
   42       | mcexpr . OP_DIVIDE cfactor

    OP_TIMES   shift, and go to state 70
    OP_DIVIDE  shift, and go to state 71

    $default  reduce using rule 39 (cexpr)


state 105

   41 mcexpr: mcexpr OP_TIMES cfactor .

    $default  reduce using rule 41 (mcexpr)


state 106

   42 mcexpr: mcexpr OP_DIVIDE cfactor .

    $default  reduce using rule 42 (mcexpr)


state 107

   30 var_decl: ID . id_list MK_SEMICOLON
   97 var_ref: ID .
   98        | ID . dim_list

    ID     shift, and go to state 15
    MK_LB  shift, and go to state 77

    $default  reduce using rule 97 (var_ref)

    id_list   go to state 16
    dim_list  go to state 79


state 108

   54 stmt: FOR . MK_LPAREN assign_expr_list MK_SEMICOLON relop_expr_list MK_SEMICOLON assign_expr_list MK_RPAREN stmt

    MK_LPAREN  shift, and go to state 137


state 109

   53 stmt: MK_LBRACE . block MK_RBRACE

    ID            shift, and go to state 107
    INT           shift, and go to state 3
    FLOAT         shift, and go to state 4
    FOR           shift, and go to state 108
    TYPEDEF       shift, and go to state 5
    MK_LBRACE     shift, and go to state 109
    MK_SEMICOLON  shift, and go to state 110
    RETURN        shift, and go to state 111

    $default  reduce using rule 22 (block)

    block      go to state 138
    decl_list  go to state 113
    decl       go to state 11
    type_decl  go to state 12
    var_decl   go to state 13
    type       go to state 114
    stmt_list  go to state 115
    stmt       go to state 116
    var_ref    go to state 117


state 110

   56 stmt: MK_SEMICOLON .

    $default  reduce using rule 56 (stmt)


state 111

   57 stmt: RETURN . MK_SEMICOLON
   58     | RETURN . relop_expr MK_SEMICOLON

    ID            shift, and go to state 51
    CONST         shift, and go to state 52
    OP_NOT        shift, and go to state 53
    MK_LPAREN     shift, and go to state 54
    MK_SEMICOLON  shift, and go to state 139

    relop_expr    go to state 140
    relop_term    go to state 56
    relop_factor  go to state 57
    expr          go to state 58
    term          go to state 59
    factor        go to state 60
    var_ref       go to state 61


state 112

   10 function_decl: VOID ID MK_LPAREN MK_RPAREN MK_LBRACE block . MK_RBRACE

    MK_RBRACE  shift, and go to state 141


state 113

   19 block: decl_list . stmt_list
   21      | decl_list .
   23 decl_list: decl_list . decl

    ID            shift, and go to state 107
    INT           shift, and go to state 3
    FLOAT         shift, and go to state 4
    FOR           shift, and go to state 108
    TYPEDEF       shift, and go to state 5
    MK_LBRACE     shift, and go to state 109
    MK_SEMICOLON  shift, and go to state 110
    RETURN        shift, and go to state 111

    $default  reduce using rule 21 (block)

    decl       go to state 23
    type_decl  go to state 12
    var_decl   go to state 13
    type       go to state 114
    stmt_list  go to state 142
    stmt       go to state 116
    var_ref    go to state 117


state 114

   29 var_decl: type . init_id_list MK_SEMICOLON

    ID  shift, and go to state 64

    init_id_list  go to state 25
    init_id       go to state 26


state 115

   20 block: stmt_list .
   51 stmt_list: stmt_list . stmt

    ID            shift, and go to state 143
    FOR           shift, and go to state 108
    MK_LBRACE     shift, and go to state 109
    MK_SEMICOLON  shift, and go to state 110
    RETURN        shift, and go to state 111

    $default  reduce using rule 20 (block)

    stmt     go to state 144
    var_ref  go to state 117


state 116

   52 stmt_list: stmt .

    $default  reduce using rule 52 (stmt_list)


state 117

   55 stmt: var_ref . OP_ASSIGN relop_expr MK_SEMICOLON

    OP_ASSIGN  shift, and go to state 145


state 118

    8 function_decl: VOID ID MK_LPAREN param_list MK_RPAREN MK_LBRACE . block MK_RBRACE

    ID            shift, and go to state 107
    INT           shift, and go to state 3
    FLOAT         shift, and go to state 4
    FOR           shift, and go to state 108
    TYPEDEF       shift, and go to state 5
    MK_LBRACE     shift, and go to state 109
    MK_SEMICOLON  shift, and go to state 110
    RETURN        shift, and go to state 111

    $default  reduce using rule 22 (block)

    block      go to state 146
    decl_list  go to state 113
    decl       go to state 11
    type_decl  go to state 12
    var_decl   go to state 13
    type       go to state 114
    stmt_list  go to state 115
    stmt       go to state 116
    var_ref    go to state 117


state 119

   11 param_list: param_list MK_COMMA param .

    $default  reduce using rule 11 (param_list)


state 120

   15 dim_fn: MK_LB . expr_null MK_RB

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    $default  reduce using rule 18 (expr_null)

    expr_null  go to state 147
    expr       go to state 148
    term       go to state 59
    factor     go to state 60
    var_ref    go to state 61


state 121

   14 param: type ID dim_fn .
   16 dim_fn: dim_fn . MK_LB expr MK_RB

    MK_LB  shift, and go to state 149

    $default  reduce using rule 14 (param)


state 122

   81 expr: expr . add_op term
  100 dim_list: MK_LB expr . MK_RB

    OP_PLUS   shift, and go to state 93
    OP_MINUS  shift, and go to state 94
    MK_RB     shift, and go to state 150

    add_op  go to state 96


state 123

   66 relop_expr: relop_expr . OP_OR relop_term
   80 nonempty_relop_expr_list: relop_expr .

    OP_OR  shift, and go to state 85

    $default  reduce using rule 80 (nonempty_relop_expr_list)


state 124

   93 factor: ID MK_LPAREN relop_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 151


state 125

   77 relop_expr_list: nonempty_relop_expr_list .
   79 nonempty_relop_expr_list: nonempty_relop_expr_list . MK_COMMA relop_expr

    MK_COMMA  shift, and go to state 152

    $default  reduce using rule 77 (relop_expr_list)


state 126

   99 dim_list: dim_list MK_LB . expr MK_RB

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    expr     go to state 153
    term     go to state 59
    factor   go to state 60
    var_ref  go to state 61


state 127

   94 factor: OP_NOT ID MK_LPAREN . relop_expr_list MK_RPAREN

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    $default  reduce using rule 78 (relop_expr_list)

    relop_expr                go to state 123
    relop_term                go to state 56
    relop_factor              go to state 57
    relop_expr_list           go to state 154
    nonempty_relop_expr_list  go to state 125
    expr                      go to state 58
    term                      go to state 59
    factor                    go to state 60
    var_ref                   go to state 61


state 128

   66 relop_expr: relop_expr . OP_OR relop_term
   90 factor: OP_NOT MK_LPAREN relop_expr . MK_RPAREN

    OP_OR      shift, and go to state 85
    MK_RPAREN  shift, and go to state 155


state 129

   89 factor: MK_LPAREN relop_expr MK_RPAREN .

    $default  reduce using rule 89 (factor)


state 130

   66 relop_expr: relop_expr OP_OR relop_term .
   68 relop_term: relop_term . OP_AND relop_factor

    OP_AND  shift, and go to state 86

    $default  reduce using rule 66 (relop_expr)


state 131

   68 relop_term: relop_term OP_AND relop_factor .

    $default  reduce using rule 68 (relop_term)


state 132

   70 relop_factor: expr rel_op expr .
   81 expr: expr . add_op term

    OP_PLUS   shift, and go to state 93
    OP_MINUS  shift, and go to state 94

    $default  reduce using rule 70 (relop_factor)

    add_op  go to state 96


state 133

   81 expr: expr add_op term .
   85 term: term . mul_op factor

    OP_TIMES   shift, and go to state 97
    OP_DIVIDE  shift, and go to state 98

    $default  reduce using rule 81 (expr)

    mul_op  go to state 99


state 134

   85 term: term mul_op factor .

    $default  reduce using rule 85 (term)


state 135

    9 function_decl: type ID MK_LPAREN MK_RPAREN MK_LBRACE block . MK_RBRACE

    MK_RBRACE  shift, and go to state 156


state 136

    7 function_decl: type ID MK_LPAREN param_list MK_RPAREN MK_LBRACE . block MK_RBRACE

    ID            shift, and go to state 107
    INT           shift, and go to state 3
    FLOAT         shift, and go to state 4
    FOR           shift, and go to state 108
    TYPEDEF       shift, and go to state 5
    MK_LBRACE     shift, and go to state 109
    MK_SEMICOLON  shift, and go to state 110
    RETURN        shift, and go to state 111

    $default  reduce using rule 22 (block)

    block      go to state 157
    decl_list  go to state 113
    decl       go to state 11
    type_decl  go to state 12
    var_decl   go to state 13
    type       go to state 114
    stmt_list  go to state 115
    stmt       go to state 116
    var_ref    go to state 117


state 137

   54 stmt: FOR MK_LPAREN . assign_expr_list MK_SEMICOLON relop_expr_list MK_SEMICOLON assign_expr_list MK_RPAREN stmt

    ID         shift, and go to state 158
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    $default  reduce using rule 60 (assign_expr_list)

    assign_expr_list           go to state 159
    nonempty_assign_expr_list  go to state 160
    assign_expr                go to state 161
    relop_expr                 go to state 162
    relop_term                 go to state 56
    relop_factor               go to state 57
    expr                       go to state 58
    term                       go to state 59
    factor                     go to state 60
    var_ref                    go to state 61


state 138

   53 stmt: MK_LBRACE block . MK_RBRACE

    MK_RBRACE  shift, and go to state 163


state 139

   57 stmt: RETURN MK_SEMICOLON .

    $default  reduce using rule 57 (stmt)


state 140

   58 stmt: RETURN relop_expr . MK_SEMICOLON
   66 relop_expr: relop_expr . OP_OR relop_term

    OP_OR         shift, and go to state 85
    MK_SEMICOLON  shift, and go to state 164


state 141

   10 function_decl: VOID ID MK_LPAREN MK_RPAREN MK_LBRACE block MK_RBRACE .

    $default  reduce using rule 10 (function_decl)


state 142

   19 block: decl_list stmt_list .
   51 stmt_list: stmt_list . stmt

    ID            shift, and go to state 143
    FOR           shift, and go to state 108
    MK_LBRACE     shift, and go to state 109
    MK_SEMICOLON  shift, and go to state 110
    RETURN        shift, and go to state 111

    $default  reduce using rule 19 (block)

    stmt     go to state 144
    var_ref  go to state 117


state 143

   97 var_ref: ID .
   98        | ID . dim_list

    MK_LB  shift, and go to state 77

    $default  reduce using rule 97 (var_ref)

    dim_list  go to state 79


state 144

   51 stmt_list: stmt_list stmt .

    $default  reduce using rule 51 (stmt_list)


state 145

   55 stmt: var_ref OP_ASSIGN . relop_expr MK_SEMICOLON

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    relop_expr    go to state 165
    relop_term    go to state 56
    relop_factor  go to state 57
    expr          go to state 58
    term          go to state 59
    factor        go to state 60
    var_ref       go to state 61


state 146

    8 function_decl: VOID ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block . MK_RBRACE

    MK_RBRACE  shift, and go to state 166


state 147

   15 dim_fn: MK_LB expr_null . MK_RB

    MK_RB  shift, and go to state 167


state 148

   17 expr_null: expr .
   81 expr: expr . add_op term

    OP_PLUS   shift, and go to state 93
    OP_MINUS  shift, and go to state 94

    $default  reduce using rule 17 (expr_null)

    add_op  go to state 96


state 149

   16 dim_fn: dim_fn MK_LB . expr MK_RB

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    expr     go to state 168
    term     go to state 59
    factor   go to state 60
    var_ref  go to state 61


state 150

  100 dim_list: MK_LB expr MK_RB .

    $default  reduce using rule 100 (dim_list)


state 151

   93 factor: ID MK_LPAREN relop_expr_list MK_RPAREN .

    $default  reduce using rule 93 (factor)


state 152

   79 nonempty_relop_expr_list: nonempty_relop_expr_list MK_COMMA . relop_expr

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    relop_expr    go to state 169
    relop_term    go to state 56
    relop_factor  go to state 57
    expr          go to state 58
    term          go to state 59
    factor        go to state 60
    var_ref       go to state 61


state 153

   81 expr: expr . add_op term
   99 dim_list: dim_list MK_LB expr . MK_RB

    OP_PLUS   shift, and go to state 93
    OP_MINUS  shift, and go to state 94
    MK_RB     shift, and go to state 170

    add_op  go to state 96


state 154

   94 factor: OP_NOT ID MK_LPAREN relop_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 171


state 155

   90 factor: OP_NOT MK_LPAREN relop_expr MK_RPAREN .

    $default  reduce using rule 90 (factor)


state 156

    9 function_decl: type ID MK_LPAREN MK_RPAREN MK_LBRACE block MK_RBRACE .

    $default  reduce using rule 9 (function_decl)


state 157

    7 function_decl: type ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block . MK_RBRACE

    MK_RBRACE  shift, and go to state 172


state 158

   63 assign_expr: ID . OP_ASSIGN relop_expr
   93 factor: ID . MK_LPAREN relop_expr_list MK_RPAREN
   97 var_ref: ID .
   98        | ID . dim_list

    OP_ASSIGN  shift, and go to state 173
    MK_LB      shift, and go to state 77
    MK_LPAREN  shift, and go to state 78

    $default  reduce using rule 97 (var_ref)

    dim_list  go to state 79


state 159

   54 stmt: FOR MK_LPAREN assign_expr_list . MK_SEMICOLON relop_expr_list MK_SEMICOLON assign_expr_list MK_RPAREN stmt

    MK_SEMICOLON  shift, and go to state 174


state 160

   59 assign_expr_list: nonempty_assign_expr_list .
   61 nonempty_assign_expr_list: nonempty_assign_expr_list . MK_COMMA assign_expr

    MK_COMMA  shift, and go to state 175

    $default  reduce using rule 59 (assign_expr_list)


state 161

   62 nonempty_assign_expr_list: assign_expr .

    $default  reduce using rule 62 (nonempty_assign_expr_list)


state 162

   64 assign_expr: relop_expr .
   66 relop_expr: relop_expr . OP_OR relop_term

    OP_OR  shift, and go to state 85

    $default  reduce using rule 64 (assign_expr)


state 163

   53 stmt: MK_LBRACE block MK_RBRACE .

    $default  reduce using rule 53 (stmt)


state 164

   58 stmt: RETURN relop_expr MK_SEMICOLON .

    $default  reduce using rule 58 (stmt)


state 165

   55 stmt: var_ref OP_ASSIGN relop_expr . MK_SEMICOLON
   66 relop_expr: relop_expr . OP_OR relop_term

    OP_OR         shift, and go to state 85
    MK_SEMICOLON  shift, and go to state 176


state 166

    8 function_decl: VOID ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE .

    $default  reduce using rule 8 (function_decl)


state 167

   15 dim_fn: MK_LB expr_null MK_RB .

    $default  reduce using rule 15 (dim_fn)


state 168

   16 dim_fn: dim_fn MK_LB expr . MK_RB
   81 expr: expr . add_op term

    OP_PLUS   shift, and go to state 93
    OP_MINUS  shift, and go to state 94
    MK_RB     shift, and go to state 177

    add_op  go to state 96


state 169

   66 relop_expr: relop_expr . OP_OR relop_term
   79 nonempty_relop_expr_list: nonempty_relop_expr_list MK_COMMA relop_expr .

    OP_OR  shift, and go to state 85

    $default  reduce using rule 79 (nonempty_relop_expr_list)


state 170

   99 dim_list: dim_list MK_LB expr MK_RB .

    $default  reduce using rule 99 (dim_list)


state 171

   94 factor: OP_NOT ID MK_LPAREN relop_expr_list MK_RPAREN .

    $default  reduce using rule 94 (factor)


state 172

    7 function_decl: type ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE .

    $default  reduce using rule 7 (function_decl)


state 173

   63 assign_expr: ID OP_ASSIGN . relop_expr

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    relop_expr    go to state 178
    relop_term    go to state 56
    relop_factor  go to state 57
    expr          go to state 58
    term          go to state 59
    factor        go to state 60
    var_ref       go to state 61


state 174

   54 stmt: FOR MK_LPAREN assign_expr_list MK_SEMICOLON . relop_expr_list MK_SEMICOLON assign_expr_list MK_RPAREN stmt

    ID         shift, and go to state 51
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    $default  reduce using rule 78 (relop_expr_list)

    relop_expr                go to state 123
    relop_term                go to state 56
    relop_factor              go to state 57
    relop_expr_list           go to state 179
    nonempty_relop_expr_list  go to state 125
    expr                      go to state 58
    term                      go to state 59
    factor                    go to state 60
    var_ref                   go to state 61


state 175

   61 nonempty_assign_expr_list: nonempty_assign_expr_list MK_COMMA . assign_expr

    ID         shift, and go to state 158
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    assign_expr   go to state 180
    relop_expr    go to state 162
    relop_term    go to state 56
    relop_factor  go to state 57
    expr          go to state 58
    term          go to state 59
    factor        go to state 60
    var_ref       go to state 61


state 176

   55 stmt: var_ref OP_ASSIGN relop_expr MK_SEMICOLON .

    $default  reduce using rule 55 (stmt)


state 177

   16 dim_fn: dim_fn MK_LB expr MK_RB .

    $default  reduce using rule 16 (dim_fn)


state 178

   63 assign_expr: ID OP_ASSIGN relop_expr .
   66 relop_expr: relop_expr . OP_OR relop_term

    OP_OR  shift, and go to state 85

    $default  reduce using rule 63 (assign_expr)


state 179

   54 stmt: FOR MK_LPAREN assign_expr_list MK_SEMICOLON relop_expr_list . MK_SEMICOLON assign_expr_list MK_RPAREN stmt

    MK_SEMICOLON  shift, and go to state 181


state 180

   61 nonempty_assign_expr_list: nonempty_assign_expr_list MK_COMMA assign_expr .

    $default  reduce using rule 61 (nonempty_assign_expr_list)


state 181

   54 stmt: FOR MK_LPAREN assign_expr_list MK_SEMICOLON relop_expr_list MK_SEMICOLON . assign_expr_list MK_RPAREN stmt

    ID         shift, and go to state 158
    CONST      shift, and go to state 52
    OP_NOT     shift, and go to state 53
    MK_LPAREN  shift, and go to state 54

    $default  reduce using rule 60 (assign_expr_list)

    assign_expr_list           go to state 182
    nonempty_assign_expr_list  go to state 160
    assign_expr                go to state 161
    relop_expr                 go to state 162
    relop_term                 go to state 56
    relop_factor               go to state 57
    expr                       go to state 58
    term                       go to state 59
    factor                     go to state 60
    var_ref                    go to state 61


state 182

   54 stmt: FOR MK_LPAREN assign_expr_list MK_SEMICOLON relop_expr_list MK_SEMICOLON assign_expr_list . MK_RPAREN stmt

    MK_RPAREN  shift, and go to state 183


state 183

   54 stmt: FOR MK_LPAREN assign_expr_list MK_SEMICOLON relop_expr_list MK_SEMICOLON assign_expr_list MK_RPAREN . stmt

    ID            shift, and go to state 143
    FOR           shift, and go to state 108
    MK_LBRACE     shift, and go to state 109
    MK_SEMICOLON  shift, and go to state 110
    RETURN        shift, and go to state 111

    stmt     go to state 184
    var_ref  go to state 117


state 184

   54 stmt: FOR MK_LPAREN assign_expr_list MK_SEMICOLON relop_expr_list MK_SEMICOLON assign_expr_list MK_RPAREN stmt .

    $default  reduce using rule 54 (stmt)
