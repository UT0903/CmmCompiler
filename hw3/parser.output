Useless nonterminals

   test


Terminals which are not used

   MK_DOT
   ERROR


Useless rules

  111 test: assign_expr


State 199 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: global_decl_list
    2        | /* empty */

    3 global_decl_list: global_decl_list global_decl
    4                 | global_decl

    5 global_decl: decl_list function_decl
    6            | function_decl

    7 function_decl: type ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE
    8              | VOID ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE
    9              | type ID MK_LPAREN MK_RPAREN MK_LBRACE block MK_RBRACE
   10              | VOID ID MK_LPAREN MK_RPAREN MK_LBRACE block MK_RBRACE

   11 param_list: param_list MK_COMMA param
   12           | param

   13 param: type ID
   14      | type ID dim_fn

   15 dim_fn: MK_LB expr_null MK_RB
   16       | dim_fn MK_LB expr MK_RB

   17 expr_null: expr
   18          | /* empty */

   19 block: decl_list stmt_list
   20      | stmt_list
   21      | decl_list
   22      | /* empty */

   23 decl_list: decl_list decl
   24          | decl

   25 decl: type_decl
   26     | var_decl

   27 type_decl: TYPEDEF type id_list MK_SEMICOLON
   28          | TYPEDEF VOID id_list MK_SEMICOLON

   29 var_decl: type init_id_list MK_SEMICOLON

   30 type: INT
   31     | FLOAT
   32     | ID

   33 id_list: ID
   34        | id_list MK_COMMA ID
   35        | id_list MK_COMMA ID dim_decl
   36        | ID dim_decl

   37 dim_decl: MK_LB cexpr MK_RB
   38         | dim_decl MK_LB cexpr MK_RB

   39 cexpr: cexpr OP_PLUS mcexpr
   40      | cexpr OP_MINUS mcexpr
   41      | mcexpr

   42 mcexpr: mcexpr OP_TIMES cfactor
   43       | mcexpr OP_DIVIDE cfactor
   44       | cfactor

   45 cfactor: CONST
   46        | unary_op CONST
   47        | MK_LPAREN cexpr MK_RPAREN
   48        | unary_op MK_LPAREN cexpr MK_RPAREN

   49 init_id_list: init_id
   50             | init_id_list MK_COMMA init_id

   51 init_id: ID
   52        | ID dim_decl
   53        | ID OP_ASSIGN relop_expr

   54 stmt_list: stmt_list stmt
   55          | stmt

   56 stmt: MK_LBRACE block MK_RBRACE
   57     | WHILE MK_LPAREN nonempty_assign_expr_list MK_RPAREN stmt
   58     | FOR MK_LPAREN assign_expr_list MK_SEMICOLON relop_expr_list MK_SEMICOLON assign_expr_list MK_RPAREN stmt
   59     | var_ref OP_ASSIGN relop_expr MK_SEMICOLON
   60     | IF MK_LPAREN nonempty_assign_expr_list MK_RPAREN stmt
   61     | IF MK_LPAREN nonempty_assign_expr_list MK_RPAREN stmt ELSE stmt
   62     | var_ref MK_LPAREN relop_expr_list MK_RPAREN MK_SEMICOLON
   63     | MK_SEMICOLON
   64     | RETURN MK_SEMICOLON
   65     | RETURN relop_expr MK_SEMICOLON

   66 assign_expr_list: nonempty_assign_expr_list
   67                 | /* empty */

   68 nonempty_assign_expr_list: nonempty_assign_expr_list MK_COMMA assign_expr
   69                          | assign_expr

   70 assign_expr: ID OP_ASSIGN relop_expr
   71            | relop_expr

   72 relop_expr: relop_term
   73           | relop_expr OP_OR relop_term

   74 relop_term: relop_factor
   75           | relop_term OP_AND relop_factor

   76 relop_factor: expr
   77             | expr rel_op expr

   78 rel_op: OP_EQ
   79       | OP_GE
   80       | OP_LE
   81       | OP_NE
   82       | OP_GT
   83       | OP_LT

   84 relop_expr_list: nonempty_relop_expr_list
   85                | /* empty */

   86 nonempty_relop_expr_list: nonempty_relop_expr_list MK_COMMA relop_expr
   87                         | relop_expr

   88 expr: expr add_op term
   89     | term

   90 add_op: OP_PLUS
   91       | OP_MINUS

   92 term: term mul_op factor
   93     | factor

   94 mul_op: OP_TIMES
   95       | OP_DIVIDE

   96 factor: MK_LPAREN relop_expr MK_RPAREN
   97       | unary_op MK_LPAREN relop_expr MK_RPAREN
   98       | CONST
   99       | unary_op CONST
  100       | ID MK_LPAREN relop_expr_list MK_RPAREN
  101       | unary_op ID MK_LPAREN relop_expr_list MK_RPAREN
  102       | var_ref
  103       | unary_op var_ref

  104 unary_op: OP_NOT
  105         | OP_PLUS
  106         | OP_MINUS

  107 var_ref: ID
  108        | ID dim_list

  109 dim_list: dim_list MK_LB expr MK_RB
  110         | MK_LB expr MK_RB


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 7 8 9 10 13 14 32 33 34 35 36 51 52 53 70 100 101 107 108
CONST (259) 45 46 98 99
VOID (260) 8 10 28
INT (261) 30
FLOAT (262) 31
IF (263) 60 61
ELSE (264) 61
WHILE (265) 57
FOR (266) 58
TYPEDEF (267) 27 28
OP_ASSIGN (268) 53 59 70
OP_OR (269) 73
OP_AND (270) 75
OP_NOT (271) 104
OP_EQ (272) 78
OP_NE (273) 81
OP_GT (274) 82
OP_LT (275) 83
OP_GE (276) 79
OP_LE (277) 80
OP_PLUS (278) 39 90 105
OP_MINUS (279) 40 91 106
OP_TIMES (280) 42 94
OP_DIVIDE (281) 43 95
MK_LB (282) 15 16 37 38 109 110
MK_RB (283) 15 16 37 38 109 110
MK_LPAREN (284) 7 8 9 10 47 48 57 58 60 61 62 96 97 100 101
MK_RPAREN (285) 7 8 9 10 47 48 57 58 60 61 62 96 97 100 101
MK_LBRACE (286) 7 8 9 10 56
MK_RBRACE (287) 7 8 9 10 56
MK_COMMA (288) 11 34 35 50 68 86
MK_SEMICOLON (289) 27 28 29 58 59 62 63 64 65
MK_DOT (290)
ERROR (291)
RETURN (292) 64 65


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
program (39)
    on left: 1 2, on right: 0
global_decl_list (40)
    on left: 3 4, on right: 1 3
global_decl (41)
    on left: 5 6, on right: 3 4
function_decl (42)
    on left: 7 8 9 10, on right: 5 6
param_list (43)
    on left: 11 12, on right: 7 8 11
param (44)
    on left: 13 14, on right: 11 12
dim_fn (45)
    on left: 15 16, on right: 14 16
expr_null (46)
    on left: 17 18, on right: 15
block (47)
    on left: 19 20 21 22, on right: 7 8 9 10 56
decl_list (48)
    on left: 23 24, on right: 5 19 21 23
decl (49)
    on left: 25 26, on right: 23 24
type_decl (50)
    on left: 27 28, on right: 25
var_decl (51)
    on left: 29, on right: 26
type (52)
    on left: 30 31 32, on right: 7 9 13 14 27 29
id_list (53)
    on left: 33 34 35 36, on right: 27 28 34 35
dim_decl (54)
    on left: 37 38, on right: 35 36 38 52
cexpr (55)
    on left: 39 40 41, on right: 37 38 39 40 47 48
mcexpr (56)
    on left: 42 43 44, on right: 39 40 41 42 43
cfactor (57)
    on left: 45 46 47 48, on right: 42 43 44
init_id_list (58)
    on left: 49 50, on right: 29 50
init_id (59)
    on left: 51 52 53, on right: 49 50
stmt_list (60)
    on left: 54 55, on right: 19 20 54
stmt (61)
    on left: 56 57 58 59 60 61 62 63 64 65, on right: 54 55 57 58 60
    61
assign_expr_list (62)
    on left: 66 67, on right: 58
nonempty_assign_expr_list (63)
    on left: 68 69, on right: 57 60 61 66 68
assign_expr (64)
    on left: 70 71, on right: 68 69
relop_expr (65)
    on left: 72 73, on right: 53 59 65 70 71 73 86 87 96 97
relop_term (66)
    on left: 74 75, on right: 72 73 75
relop_factor (67)
    on left: 76 77, on right: 74 75
rel_op (68)
    on left: 78 79 80 81 82 83, on right: 77
relop_expr_list (69)
    on left: 84 85, on right: 58 62 100 101
nonempty_relop_expr_list (70)
    on left: 86 87, on right: 84 86
expr (71)
    on left: 88 89, on right: 16 17 76 77 88 109 110
add_op (72)
    on left: 90 91, on right: 88
term (73)
    on left: 92 93, on right: 88 89 92
mul_op (74)
    on left: 94 95, on right: 92
factor (75)
    on left: 96 97 98 99 100 101 102 103, on right: 92 93
unary_op (76)
    on left: 104 105 106, on right: 46 48 97 99 101 103
var_ref (77)
    on left: 107 108, on right: 59 62 102 103
dim_list (78)
    on left: 109 110, on right: 108 109


state 0

    0 $accept: . program $end

    ID       shift, and go to state 1
    VOID     shift, and go to state 2
    INT      shift, and go to state 3
    FLOAT    shift, and go to state 4
    TYPEDEF  shift, and go to state 5

    $default  reduce using rule 2 (program)

    program           go to state 6
    global_decl_list  go to state 7
    global_decl       go to state 8
    function_decl     go to state 9
    decl_list         go to state 10
    decl              go to state 11
    type_decl         go to state 12
    var_decl          go to state 13
    type              go to state 14


state 1

   32 type: ID .

    $default  reduce using rule 32 (type)


state 2

    8 function_decl: VOID . ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE
   10              | VOID . ID MK_LPAREN MK_RPAREN MK_LBRACE block MK_RBRACE

    ID  shift, and go to state 15


state 3

   30 type: INT .

    $default  reduce using rule 30 (type)


state 4

   31 type: FLOAT .

    $default  reduce using rule 31 (type)


state 5

   27 type_decl: TYPEDEF . type id_list MK_SEMICOLON
   28          | TYPEDEF . VOID id_list MK_SEMICOLON

    ID     shift, and go to state 1
    VOID   shift, and go to state 16
    INT    shift, and go to state 3
    FLOAT  shift, and go to state 4

    type  go to state 17


state 6

    0 $accept: program . $end

    $end  shift, and go to state 18


state 7

    1 program: global_decl_list .
    3 global_decl_list: global_decl_list . global_decl

    ID       shift, and go to state 1
    VOID     shift, and go to state 2
    INT      shift, and go to state 3
    FLOAT    shift, and go to state 4
    TYPEDEF  shift, and go to state 5

    $default  reduce using rule 1 (program)

    global_decl    go to state 19
    function_decl  go to state 9
    decl_list      go to state 10
    decl           go to state 11
    type_decl      go to state 12
    var_decl       go to state 13
    type           go to state 14


state 8

    4 global_decl_list: global_decl .

    $default  reduce using rule 4 (global_decl_list)


state 9

    6 global_decl: function_decl .

    $default  reduce using rule 6 (global_decl)


state 10

    5 global_decl: decl_list . function_decl
   23 decl_list: decl_list . decl

    ID       shift, and go to state 1
    VOID     shift, and go to state 2
    INT      shift, and go to state 3
    FLOAT    shift, and go to state 4
    TYPEDEF  shift, and go to state 5

    function_decl  go to state 20
    decl           go to state 21
    type_decl      go to state 12
    var_decl       go to state 13
    type           go to state 14


state 11

   24 decl_list: decl .

    $default  reduce using rule 24 (decl_list)


state 12

   25 decl: type_decl .

    $default  reduce using rule 25 (decl)


state 13

   26 decl: var_decl .

    $default  reduce using rule 26 (decl)


state 14

    7 function_decl: type . ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE
    9              | type . ID MK_LPAREN MK_RPAREN MK_LBRACE block MK_RBRACE
   29 var_decl: type . init_id_list MK_SEMICOLON

    ID  shift, and go to state 22

    init_id_list  go to state 23
    init_id       go to state 24


state 15

    8 function_decl: VOID ID . MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE
   10              | VOID ID . MK_LPAREN MK_RPAREN MK_LBRACE block MK_RBRACE

    MK_LPAREN  shift, and go to state 25


state 16

   28 type_decl: TYPEDEF VOID . id_list MK_SEMICOLON

    ID  shift, and go to state 26

    id_list  go to state 27


state 17

   27 type_decl: TYPEDEF type . id_list MK_SEMICOLON

    ID  shift, and go to state 26

    id_list  go to state 28


state 18

    0 $accept: program $end .

    $default  accept


state 19

    3 global_decl_list: global_decl_list global_decl .

    $default  reduce using rule 3 (global_decl_list)


state 20

    5 global_decl: decl_list function_decl .

    $default  reduce using rule 5 (global_decl)


state 21

   23 decl_list: decl_list decl .

    $default  reduce using rule 23 (decl_list)


state 22

    7 function_decl: type ID . MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE
    9              | type ID . MK_LPAREN MK_RPAREN MK_LBRACE block MK_RBRACE
   51 init_id: ID .
   52        | ID . dim_decl
   53        | ID . OP_ASSIGN relop_expr

    OP_ASSIGN  shift, and go to state 29
    MK_LB      shift, and go to state 30
    MK_LPAREN  shift, and go to state 31

    $default  reduce using rule 51 (init_id)

    dim_decl  go to state 32


state 23

   29 var_decl: type init_id_list . MK_SEMICOLON
   50 init_id_list: init_id_list . MK_COMMA init_id

    MK_COMMA      shift, and go to state 33
    MK_SEMICOLON  shift, and go to state 34


state 24

   49 init_id_list: init_id .

    $default  reduce using rule 49 (init_id_list)


state 25

    8 function_decl: VOID ID MK_LPAREN . param_list MK_RPAREN MK_LBRACE block MK_RBRACE
   10              | VOID ID MK_LPAREN . MK_RPAREN MK_LBRACE block MK_RBRACE

    ID         shift, and go to state 1
    INT        shift, and go to state 3
    FLOAT      shift, and go to state 4
    MK_RPAREN  shift, and go to state 35

    param_list  go to state 36
    param       go to state 37
    type        go to state 38


state 26

   33 id_list: ID .
   36        | ID . dim_decl

    MK_LB  shift, and go to state 30

    $default  reduce using rule 33 (id_list)

    dim_decl  go to state 39


state 27

   28 type_decl: TYPEDEF VOID id_list . MK_SEMICOLON
   34 id_list: id_list . MK_COMMA ID
   35        | id_list . MK_COMMA ID dim_decl

    MK_COMMA      shift, and go to state 40
    MK_SEMICOLON  shift, and go to state 41


state 28

   27 type_decl: TYPEDEF type id_list . MK_SEMICOLON
   34 id_list: id_list . MK_COMMA ID
   35        | id_list . MK_COMMA ID dim_decl

    MK_COMMA      shift, and go to state 40
    MK_SEMICOLON  shift, and go to state 42


state 29

   53 init_id: ID OP_ASSIGN . relop_expr

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    relop_expr    go to state 49
    relop_term    go to state 50
    relop_factor  go to state 51
    expr          go to state 52
    term          go to state 53
    factor        go to state 54
    unary_op      go to state 55
    var_ref       go to state 56


state 30

   37 dim_decl: MK_LB . cexpr MK_RB

    CONST      shift, and go to state 57
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 58

    cexpr     go to state 59
    mcexpr    go to state 60
    cfactor   go to state 61
    unary_op  go to state 62


state 31

    7 function_decl: type ID MK_LPAREN . param_list MK_RPAREN MK_LBRACE block MK_RBRACE
    9              | type ID MK_LPAREN . MK_RPAREN MK_LBRACE block MK_RBRACE

    ID         shift, and go to state 1
    INT        shift, and go to state 3
    FLOAT      shift, and go to state 4
    MK_RPAREN  shift, and go to state 63

    param_list  go to state 64
    param       go to state 37
    type        go to state 38


state 32

   38 dim_decl: dim_decl . MK_LB cexpr MK_RB
   52 init_id: ID dim_decl .

    MK_LB  shift, and go to state 65

    $default  reduce using rule 52 (init_id)


state 33

   50 init_id_list: init_id_list MK_COMMA . init_id

    ID  shift, and go to state 66

    init_id  go to state 67


state 34

   29 var_decl: type init_id_list MK_SEMICOLON .

    $default  reduce using rule 29 (var_decl)


state 35

   10 function_decl: VOID ID MK_LPAREN MK_RPAREN . MK_LBRACE block MK_RBRACE

    MK_LBRACE  shift, and go to state 68


state 36

    8 function_decl: VOID ID MK_LPAREN param_list . MK_RPAREN MK_LBRACE block MK_RBRACE
   11 param_list: param_list . MK_COMMA param

    MK_RPAREN  shift, and go to state 69
    MK_COMMA   shift, and go to state 70


state 37

   12 param_list: param .

    $default  reduce using rule 12 (param_list)


state 38

   13 param: type . ID
   14      | type . ID dim_fn

    ID  shift, and go to state 71


state 39

   36 id_list: ID dim_decl .
   38 dim_decl: dim_decl . MK_LB cexpr MK_RB

    MK_LB  shift, and go to state 65

    $default  reduce using rule 36 (id_list)


state 40

   34 id_list: id_list MK_COMMA . ID
   35        | id_list MK_COMMA . ID dim_decl

    ID  shift, and go to state 72


state 41

   28 type_decl: TYPEDEF VOID id_list MK_SEMICOLON .

    $default  reduce using rule 28 (type_decl)


state 42

   27 type_decl: TYPEDEF type id_list MK_SEMICOLON .

    $default  reduce using rule 27 (type_decl)


state 43

  100 factor: ID . MK_LPAREN relop_expr_list MK_RPAREN
  107 var_ref: ID .
  108        | ID . dim_list

    MK_LB      shift, and go to state 73
    MK_LPAREN  shift, and go to state 74

    $default  reduce using rule 107 (var_ref)

    dim_list  go to state 75


state 44

   98 factor: CONST .

    $default  reduce using rule 98 (factor)


state 45

  104 unary_op: OP_NOT .

    $default  reduce using rule 104 (unary_op)


state 46

  105 unary_op: OP_PLUS .

    $default  reduce using rule 105 (unary_op)


state 47

  106 unary_op: OP_MINUS .

    $default  reduce using rule 106 (unary_op)


state 48

   96 factor: MK_LPAREN . relop_expr MK_RPAREN

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    relop_expr    go to state 76
    relop_term    go to state 50
    relop_factor  go to state 51
    expr          go to state 52
    term          go to state 53
    factor        go to state 54
    unary_op      go to state 55
    var_ref       go to state 56


state 49

   53 init_id: ID OP_ASSIGN relop_expr .
   73 relop_expr: relop_expr . OP_OR relop_term

    OP_OR  shift, and go to state 77

    $default  reduce using rule 53 (init_id)


state 50

   72 relop_expr: relop_term .
   75 relop_term: relop_term . OP_AND relop_factor

    OP_AND  shift, and go to state 78

    $default  reduce using rule 72 (relop_expr)


state 51

   74 relop_term: relop_factor .

    $default  reduce using rule 74 (relop_term)


state 52

   76 relop_factor: expr .
   77             | expr . rel_op expr
   88 expr: expr . add_op term

    OP_EQ     shift, and go to state 79
    OP_NE     shift, and go to state 80
    OP_GT     shift, and go to state 81
    OP_LT     shift, and go to state 82
    OP_GE     shift, and go to state 83
    OP_LE     shift, and go to state 84
    OP_PLUS   shift, and go to state 85
    OP_MINUS  shift, and go to state 86

    $default  reduce using rule 76 (relop_factor)

    rel_op  go to state 87
    add_op  go to state 88


state 53

   89 expr: term .
   92 term: term . mul_op factor

    OP_TIMES   shift, and go to state 89
    OP_DIVIDE  shift, and go to state 90

    $default  reduce using rule 89 (expr)

    mul_op  go to state 91


state 54

   93 term: factor .

    $default  reduce using rule 93 (term)


state 55

   97 factor: unary_op . MK_LPAREN relop_expr MK_RPAREN
   99       | unary_op . CONST
  101       | unary_op . ID MK_LPAREN relop_expr_list MK_RPAREN
  103       | unary_op . var_ref

    ID         shift, and go to state 92
    CONST      shift, and go to state 93
    MK_LPAREN  shift, and go to state 94

    var_ref  go to state 95


state 56

  102 factor: var_ref .

    $default  reduce using rule 102 (factor)


state 57

   45 cfactor: CONST .

    $default  reduce using rule 45 (cfactor)


state 58

   47 cfactor: MK_LPAREN . cexpr MK_RPAREN

    CONST      shift, and go to state 57
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 58

    cexpr     go to state 96
    mcexpr    go to state 60
    cfactor   go to state 61
    unary_op  go to state 62


state 59

   37 dim_decl: MK_LB cexpr . MK_RB
   39 cexpr: cexpr . OP_PLUS mcexpr
   40      | cexpr . OP_MINUS mcexpr

    OP_PLUS   shift, and go to state 97
    OP_MINUS  shift, and go to state 98
    MK_RB     shift, and go to state 99


state 60

   41 cexpr: mcexpr .
   42 mcexpr: mcexpr . OP_TIMES cfactor
   43       | mcexpr . OP_DIVIDE cfactor

    OP_TIMES   shift, and go to state 100
    OP_DIVIDE  shift, and go to state 101

    $default  reduce using rule 41 (cexpr)


state 61

   44 mcexpr: cfactor .

    $default  reduce using rule 44 (mcexpr)


state 62

   46 cfactor: unary_op . CONST
   48        | unary_op . MK_LPAREN cexpr MK_RPAREN

    CONST      shift, and go to state 102
    MK_LPAREN  shift, and go to state 103


state 63

    9 function_decl: type ID MK_LPAREN MK_RPAREN . MK_LBRACE block MK_RBRACE

    MK_LBRACE  shift, and go to state 104


state 64

    7 function_decl: type ID MK_LPAREN param_list . MK_RPAREN MK_LBRACE block MK_RBRACE
   11 param_list: param_list . MK_COMMA param

    MK_RPAREN  shift, and go to state 105
    MK_COMMA   shift, and go to state 70


state 65

   38 dim_decl: dim_decl MK_LB . cexpr MK_RB

    CONST      shift, and go to state 57
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 58

    cexpr     go to state 106
    mcexpr    go to state 60
    cfactor   go to state 61
    unary_op  go to state 62


state 66

   51 init_id: ID .
   52        | ID . dim_decl
   53        | ID . OP_ASSIGN relop_expr

    OP_ASSIGN  shift, and go to state 29
    MK_LB      shift, and go to state 30

    $default  reduce using rule 51 (init_id)

    dim_decl  go to state 32


state 67

   50 init_id_list: init_id_list MK_COMMA init_id .

    $default  reduce using rule 50 (init_id_list)


state 68

   10 function_decl: VOID ID MK_LPAREN MK_RPAREN MK_LBRACE . block MK_RBRACE

    ID            shift, and go to state 107
    INT           shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 108
    WHILE         shift, and go to state 109
    FOR           shift, and go to state 110
    TYPEDEF       shift, and go to state 5
    MK_LBRACE     shift, and go to state 111
    MK_SEMICOLON  shift, and go to state 112
    RETURN        shift, and go to state 113

    $default  reduce using rule 22 (block)

    block      go to state 114
    decl_list  go to state 115
    decl       go to state 11
    type_decl  go to state 12
    var_decl   go to state 13
    type       go to state 116
    stmt_list  go to state 117
    stmt       go to state 118
    var_ref    go to state 119


state 69

    8 function_decl: VOID ID MK_LPAREN param_list MK_RPAREN . MK_LBRACE block MK_RBRACE

    MK_LBRACE  shift, and go to state 120


state 70

   11 param_list: param_list MK_COMMA . param

    ID     shift, and go to state 1
    INT    shift, and go to state 3
    FLOAT  shift, and go to state 4

    param  go to state 121
    type   go to state 38


state 71

   13 param: type ID .
   14      | type ID . dim_fn

    MK_LB  shift, and go to state 122

    $default  reduce using rule 13 (param)

    dim_fn  go to state 123


state 72

   34 id_list: id_list MK_COMMA ID .
   35        | id_list MK_COMMA ID . dim_decl

    MK_LB  shift, and go to state 30

    $default  reduce using rule 34 (id_list)

    dim_decl  go to state 124


state 73

  110 dim_list: MK_LB . expr MK_RB

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    expr      go to state 125
    term      go to state 53
    factor    go to state 54
    unary_op  go to state 55
    var_ref   go to state 56


state 74

  100 factor: ID MK_LPAREN . relop_expr_list MK_RPAREN

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    $default  reduce using rule 85 (relop_expr_list)

    relop_expr                go to state 126
    relop_term                go to state 50
    relop_factor              go to state 51
    relop_expr_list           go to state 127
    nonempty_relop_expr_list  go to state 128
    expr                      go to state 52
    term                      go to state 53
    factor                    go to state 54
    unary_op                  go to state 55
    var_ref                   go to state 56


state 75

  108 var_ref: ID dim_list .
  109 dim_list: dim_list . MK_LB expr MK_RB

    MK_LB  shift, and go to state 129

    $default  reduce using rule 108 (var_ref)


state 76

   73 relop_expr: relop_expr . OP_OR relop_term
   96 factor: MK_LPAREN relop_expr . MK_RPAREN

    OP_OR      shift, and go to state 77
    MK_RPAREN  shift, and go to state 130


state 77

   73 relop_expr: relop_expr OP_OR . relop_term

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    relop_term    go to state 131
    relop_factor  go to state 51
    expr          go to state 52
    term          go to state 53
    factor        go to state 54
    unary_op      go to state 55
    var_ref       go to state 56


state 78

   75 relop_term: relop_term OP_AND . relop_factor

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    relop_factor  go to state 132
    expr          go to state 52
    term          go to state 53
    factor        go to state 54
    unary_op      go to state 55
    var_ref       go to state 56


state 79

   78 rel_op: OP_EQ .

    $default  reduce using rule 78 (rel_op)


state 80

   81 rel_op: OP_NE .

    $default  reduce using rule 81 (rel_op)


state 81

   82 rel_op: OP_GT .

    $default  reduce using rule 82 (rel_op)


state 82

   83 rel_op: OP_LT .

    $default  reduce using rule 83 (rel_op)


state 83

   79 rel_op: OP_GE .

    $default  reduce using rule 79 (rel_op)


state 84

   80 rel_op: OP_LE .

    $default  reduce using rule 80 (rel_op)


state 85

   90 add_op: OP_PLUS .

    $default  reduce using rule 90 (add_op)


state 86

   91 add_op: OP_MINUS .

    $default  reduce using rule 91 (add_op)


state 87

   77 relop_factor: expr rel_op . expr

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    expr      go to state 133
    term      go to state 53
    factor    go to state 54
    unary_op  go to state 55
    var_ref   go to state 56


state 88

   88 expr: expr add_op . term

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    term      go to state 134
    factor    go to state 54
    unary_op  go to state 55
    var_ref   go to state 56


state 89

   94 mul_op: OP_TIMES .

    $default  reduce using rule 94 (mul_op)


state 90

   95 mul_op: OP_DIVIDE .

    $default  reduce using rule 95 (mul_op)


state 91

   92 term: term mul_op . factor

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    factor    go to state 135
    unary_op  go to state 55
    var_ref   go to state 56


state 92

  101 factor: unary_op ID . MK_LPAREN relop_expr_list MK_RPAREN
  107 var_ref: ID .
  108        | ID . dim_list

    MK_LB      shift, and go to state 73
    MK_LPAREN  shift, and go to state 136

    $default  reduce using rule 107 (var_ref)

    dim_list  go to state 75


state 93

   99 factor: unary_op CONST .

    $default  reduce using rule 99 (factor)


state 94

   97 factor: unary_op MK_LPAREN . relop_expr MK_RPAREN

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    relop_expr    go to state 137
    relop_term    go to state 50
    relop_factor  go to state 51
    expr          go to state 52
    term          go to state 53
    factor        go to state 54
    unary_op      go to state 55
    var_ref       go to state 56


state 95

  103 factor: unary_op var_ref .

    $default  reduce using rule 103 (factor)


state 96

   39 cexpr: cexpr . OP_PLUS mcexpr
   40      | cexpr . OP_MINUS mcexpr
   47 cfactor: MK_LPAREN cexpr . MK_RPAREN

    OP_PLUS    shift, and go to state 97
    OP_MINUS   shift, and go to state 98
    MK_RPAREN  shift, and go to state 138


state 97

   39 cexpr: cexpr OP_PLUS . mcexpr

    CONST      shift, and go to state 57
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 58

    mcexpr    go to state 139
    cfactor   go to state 61
    unary_op  go to state 62


state 98

   40 cexpr: cexpr OP_MINUS . mcexpr

    CONST      shift, and go to state 57
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 58

    mcexpr    go to state 140
    cfactor   go to state 61
    unary_op  go to state 62


state 99

   37 dim_decl: MK_LB cexpr MK_RB .

    $default  reduce using rule 37 (dim_decl)


state 100

   42 mcexpr: mcexpr OP_TIMES . cfactor

    CONST      shift, and go to state 57
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 58

    cfactor   go to state 141
    unary_op  go to state 62


state 101

   43 mcexpr: mcexpr OP_DIVIDE . cfactor

    CONST      shift, and go to state 57
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 58

    cfactor   go to state 142
    unary_op  go to state 62


state 102

   46 cfactor: unary_op CONST .

    $default  reduce using rule 46 (cfactor)


state 103

   48 cfactor: unary_op MK_LPAREN . cexpr MK_RPAREN

    CONST      shift, and go to state 57
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 58

    cexpr     go to state 143
    mcexpr    go to state 60
    cfactor   go to state 61
    unary_op  go to state 62


state 104

    9 function_decl: type ID MK_LPAREN MK_RPAREN MK_LBRACE . block MK_RBRACE

    ID            shift, and go to state 107
    INT           shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 108
    WHILE         shift, and go to state 109
    FOR           shift, and go to state 110
    TYPEDEF       shift, and go to state 5
    MK_LBRACE     shift, and go to state 111
    MK_SEMICOLON  shift, and go to state 112
    RETURN        shift, and go to state 113

    $default  reduce using rule 22 (block)

    block      go to state 144
    decl_list  go to state 115
    decl       go to state 11
    type_decl  go to state 12
    var_decl   go to state 13
    type       go to state 116
    stmt_list  go to state 117
    stmt       go to state 118
    var_ref    go to state 119


state 105

    7 function_decl: type ID MK_LPAREN param_list MK_RPAREN . MK_LBRACE block MK_RBRACE

    MK_LBRACE  shift, and go to state 145


state 106

   38 dim_decl: dim_decl MK_LB cexpr . MK_RB
   39 cexpr: cexpr . OP_PLUS mcexpr
   40      | cexpr . OP_MINUS mcexpr

    OP_PLUS   shift, and go to state 97
    OP_MINUS  shift, and go to state 98
    MK_RB     shift, and go to state 146


state 107

   32 type: ID .
  107 var_ref: ID .
  108        | ID . dim_list

    MK_LB  shift, and go to state 73

    ID        reduce using rule 32 (type)
    $default  reduce using rule 107 (var_ref)

    dim_list  go to state 75


state 108

   60 stmt: IF . MK_LPAREN nonempty_assign_expr_list MK_RPAREN stmt
   61     | IF . MK_LPAREN nonempty_assign_expr_list MK_RPAREN stmt ELSE stmt

    MK_LPAREN  shift, and go to state 147


state 109

   57 stmt: WHILE . MK_LPAREN nonempty_assign_expr_list MK_RPAREN stmt

    MK_LPAREN  shift, and go to state 148


state 110

   58 stmt: FOR . MK_LPAREN assign_expr_list MK_SEMICOLON relop_expr_list MK_SEMICOLON assign_expr_list MK_RPAREN stmt

    MK_LPAREN  shift, and go to state 149


state 111

   56 stmt: MK_LBRACE . block MK_RBRACE

    ID            shift, and go to state 107
    INT           shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 108
    WHILE         shift, and go to state 109
    FOR           shift, and go to state 110
    TYPEDEF       shift, and go to state 5
    MK_LBRACE     shift, and go to state 111
    MK_SEMICOLON  shift, and go to state 112
    RETURN        shift, and go to state 113

    $default  reduce using rule 22 (block)

    block      go to state 150
    decl_list  go to state 115
    decl       go to state 11
    type_decl  go to state 12
    var_decl   go to state 13
    type       go to state 116
    stmt_list  go to state 117
    stmt       go to state 118
    var_ref    go to state 119


state 112

   63 stmt: MK_SEMICOLON .

    $default  reduce using rule 63 (stmt)


state 113

   64 stmt: RETURN . MK_SEMICOLON
   65     | RETURN . relop_expr MK_SEMICOLON

    ID            shift, and go to state 43
    CONST         shift, and go to state 44
    OP_NOT        shift, and go to state 45
    OP_PLUS       shift, and go to state 46
    OP_MINUS      shift, and go to state 47
    MK_LPAREN     shift, and go to state 48
    MK_SEMICOLON  shift, and go to state 151

    relop_expr    go to state 152
    relop_term    go to state 50
    relop_factor  go to state 51
    expr          go to state 52
    term          go to state 53
    factor        go to state 54
    unary_op      go to state 55
    var_ref       go to state 56


state 114

   10 function_decl: VOID ID MK_LPAREN MK_RPAREN MK_LBRACE block . MK_RBRACE

    MK_RBRACE  shift, and go to state 153


state 115

   19 block: decl_list . stmt_list
   21      | decl_list .
   23 decl_list: decl_list . decl

    ID            shift, and go to state 107
    INT           shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 108
    WHILE         shift, and go to state 109
    FOR           shift, and go to state 110
    TYPEDEF       shift, and go to state 5
    MK_LBRACE     shift, and go to state 111
    MK_SEMICOLON  shift, and go to state 112
    RETURN        shift, and go to state 113

    $default  reduce using rule 21 (block)

    decl       go to state 21
    type_decl  go to state 12
    var_decl   go to state 13
    type       go to state 116
    stmt_list  go to state 154
    stmt       go to state 118
    var_ref    go to state 119


state 116

   29 var_decl: type . init_id_list MK_SEMICOLON

    ID  shift, and go to state 66

    init_id_list  go to state 23
    init_id       go to state 24


state 117

   20 block: stmt_list .
   54 stmt_list: stmt_list . stmt

    ID            shift, and go to state 155
    IF            shift, and go to state 108
    WHILE         shift, and go to state 109
    FOR           shift, and go to state 110
    MK_LBRACE     shift, and go to state 111
    MK_SEMICOLON  shift, and go to state 112
    RETURN        shift, and go to state 113

    $default  reduce using rule 20 (block)

    stmt     go to state 156
    var_ref  go to state 119


state 118

   55 stmt_list: stmt .

    $default  reduce using rule 55 (stmt_list)


state 119

   59 stmt: var_ref . OP_ASSIGN relop_expr MK_SEMICOLON
   62     | var_ref . MK_LPAREN relop_expr_list MK_RPAREN MK_SEMICOLON

    OP_ASSIGN  shift, and go to state 157
    MK_LPAREN  shift, and go to state 158


state 120

    8 function_decl: VOID ID MK_LPAREN param_list MK_RPAREN MK_LBRACE . block MK_RBRACE

    ID            shift, and go to state 107
    INT           shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 108
    WHILE         shift, and go to state 109
    FOR           shift, and go to state 110
    TYPEDEF       shift, and go to state 5
    MK_LBRACE     shift, and go to state 111
    MK_SEMICOLON  shift, and go to state 112
    RETURN        shift, and go to state 113

    $default  reduce using rule 22 (block)

    block      go to state 159
    decl_list  go to state 115
    decl       go to state 11
    type_decl  go to state 12
    var_decl   go to state 13
    type       go to state 116
    stmt_list  go to state 117
    stmt       go to state 118
    var_ref    go to state 119


state 121

   11 param_list: param_list MK_COMMA param .

    $default  reduce using rule 11 (param_list)


state 122

   15 dim_fn: MK_LB . expr_null MK_RB

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    $default  reduce using rule 18 (expr_null)

    expr_null  go to state 160
    expr       go to state 161
    term       go to state 53
    factor     go to state 54
    unary_op   go to state 55
    var_ref    go to state 56


state 123

   14 param: type ID dim_fn .
   16 dim_fn: dim_fn . MK_LB expr MK_RB

    MK_LB  shift, and go to state 162

    $default  reduce using rule 14 (param)


state 124

   35 id_list: id_list MK_COMMA ID dim_decl .
   38 dim_decl: dim_decl . MK_LB cexpr MK_RB

    MK_LB  shift, and go to state 65

    $default  reduce using rule 35 (id_list)


state 125

   88 expr: expr . add_op term
  110 dim_list: MK_LB expr . MK_RB

    OP_PLUS   shift, and go to state 85
    OP_MINUS  shift, and go to state 86
    MK_RB     shift, and go to state 163

    add_op  go to state 88


state 126

   73 relop_expr: relop_expr . OP_OR relop_term
   87 nonempty_relop_expr_list: relop_expr .

    OP_OR  shift, and go to state 77

    $default  reduce using rule 87 (nonempty_relop_expr_list)


state 127

  100 factor: ID MK_LPAREN relop_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 164


state 128

   84 relop_expr_list: nonempty_relop_expr_list .
   86 nonempty_relop_expr_list: nonempty_relop_expr_list . MK_COMMA relop_expr

    MK_COMMA  shift, and go to state 165

    $default  reduce using rule 84 (relop_expr_list)


state 129

  109 dim_list: dim_list MK_LB . expr MK_RB

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    expr      go to state 166
    term      go to state 53
    factor    go to state 54
    unary_op  go to state 55
    var_ref   go to state 56


state 130

   96 factor: MK_LPAREN relop_expr MK_RPAREN .

    $default  reduce using rule 96 (factor)


state 131

   73 relop_expr: relop_expr OP_OR relop_term .
   75 relop_term: relop_term . OP_AND relop_factor

    OP_AND  shift, and go to state 78

    $default  reduce using rule 73 (relop_expr)


state 132

   75 relop_term: relop_term OP_AND relop_factor .

    $default  reduce using rule 75 (relop_term)


state 133

   77 relop_factor: expr rel_op expr .
   88 expr: expr . add_op term

    OP_PLUS   shift, and go to state 85
    OP_MINUS  shift, and go to state 86

    $default  reduce using rule 77 (relop_factor)

    add_op  go to state 88


state 134

   88 expr: expr add_op term .
   92 term: term . mul_op factor

    OP_TIMES   shift, and go to state 89
    OP_DIVIDE  shift, and go to state 90

    $default  reduce using rule 88 (expr)

    mul_op  go to state 91


state 135

   92 term: term mul_op factor .

    $default  reduce using rule 92 (term)


state 136

  101 factor: unary_op ID MK_LPAREN . relop_expr_list MK_RPAREN

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    $default  reduce using rule 85 (relop_expr_list)

    relop_expr                go to state 126
    relop_term                go to state 50
    relop_factor              go to state 51
    relop_expr_list           go to state 167
    nonempty_relop_expr_list  go to state 128
    expr                      go to state 52
    term                      go to state 53
    factor                    go to state 54
    unary_op                  go to state 55
    var_ref                   go to state 56


state 137

   73 relop_expr: relop_expr . OP_OR relop_term
   97 factor: unary_op MK_LPAREN relop_expr . MK_RPAREN

    OP_OR      shift, and go to state 77
    MK_RPAREN  shift, and go to state 168


state 138

   47 cfactor: MK_LPAREN cexpr MK_RPAREN .

    $default  reduce using rule 47 (cfactor)


state 139

   39 cexpr: cexpr OP_PLUS mcexpr .
   42 mcexpr: mcexpr . OP_TIMES cfactor
   43       | mcexpr . OP_DIVIDE cfactor

    OP_TIMES   shift, and go to state 100
    OP_DIVIDE  shift, and go to state 101

    $default  reduce using rule 39 (cexpr)


state 140

   40 cexpr: cexpr OP_MINUS mcexpr .
   42 mcexpr: mcexpr . OP_TIMES cfactor
   43       | mcexpr . OP_DIVIDE cfactor

    OP_TIMES   shift, and go to state 100
    OP_DIVIDE  shift, and go to state 101

    $default  reduce using rule 40 (cexpr)


state 141

   42 mcexpr: mcexpr OP_TIMES cfactor .

    $default  reduce using rule 42 (mcexpr)


state 142

   43 mcexpr: mcexpr OP_DIVIDE cfactor .

    $default  reduce using rule 43 (mcexpr)


state 143

   39 cexpr: cexpr . OP_PLUS mcexpr
   40      | cexpr . OP_MINUS mcexpr
   48 cfactor: unary_op MK_LPAREN cexpr . MK_RPAREN

    OP_PLUS    shift, and go to state 97
    OP_MINUS   shift, and go to state 98
    MK_RPAREN  shift, and go to state 169


state 144

    9 function_decl: type ID MK_LPAREN MK_RPAREN MK_LBRACE block . MK_RBRACE

    MK_RBRACE  shift, and go to state 170


state 145

    7 function_decl: type ID MK_LPAREN param_list MK_RPAREN MK_LBRACE . block MK_RBRACE

    ID            shift, and go to state 107
    INT           shift, and go to state 3
    FLOAT         shift, and go to state 4
    IF            shift, and go to state 108
    WHILE         shift, and go to state 109
    FOR           shift, and go to state 110
    TYPEDEF       shift, and go to state 5
    MK_LBRACE     shift, and go to state 111
    MK_SEMICOLON  shift, and go to state 112
    RETURN        shift, and go to state 113

    $default  reduce using rule 22 (block)

    block      go to state 171
    decl_list  go to state 115
    decl       go to state 11
    type_decl  go to state 12
    var_decl   go to state 13
    type       go to state 116
    stmt_list  go to state 117
    stmt       go to state 118
    var_ref    go to state 119


state 146

   38 dim_decl: dim_decl MK_LB cexpr MK_RB .

    $default  reduce using rule 38 (dim_decl)


state 147

   60 stmt: IF MK_LPAREN . nonempty_assign_expr_list MK_RPAREN stmt
   61     | IF MK_LPAREN . nonempty_assign_expr_list MK_RPAREN stmt ELSE stmt

    ID         shift, and go to state 172
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    nonempty_assign_expr_list  go to state 173
    assign_expr                go to state 174
    relop_expr                 go to state 175
    relop_term                 go to state 50
    relop_factor               go to state 51
    expr                       go to state 52
    term                       go to state 53
    factor                     go to state 54
    unary_op                   go to state 55
    var_ref                    go to state 56


state 148

   57 stmt: WHILE MK_LPAREN . nonempty_assign_expr_list MK_RPAREN stmt

    ID         shift, and go to state 172
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    nonempty_assign_expr_list  go to state 176
    assign_expr                go to state 174
    relop_expr                 go to state 175
    relop_term                 go to state 50
    relop_factor               go to state 51
    expr                       go to state 52
    term                       go to state 53
    factor                     go to state 54
    unary_op                   go to state 55
    var_ref                    go to state 56


state 149

   58 stmt: FOR MK_LPAREN . assign_expr_list MK_SEMICOLON relop_expr_list MK_SEMICOLON assign_expr_list MK_RPAREN stmt

    ID         shift, and go to state 172
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    $default  reduce using rule 67 (assign_expr_list)

    assign_expr_list           go to state 177
    nonempty_assign_expr_list  go to state 178
    assign_expr                go to state 174
    relop_expr                 go to state 175
    relop_term                 go to state 50
    relop_factor               go to state 51
    expr                       go to state 52
    term                       go to state 53
    factor                     go to state 54
    unary_op                   go to state 55
    var_ref                    go to state 56


state 150

   56 stmt: MK_LBRACE block . MK_RBRACE

    MK_RBRACE  shift, and go to state 179


state 151

   64 stmt: RETURN MK_SEMICOLON .

    $default  reduce using rule 64 (stmt)


state 152

   65 stmt: RETURN relop_expr . MK_SEMICOLON
   73 relop_expr: relop_expr . OP_OR relop_term

    OP_OR         shift, and go to state 77
    MK_SEMICOLON  shift, and go to state 180


state 153

   10 function_decl: VOID ID MK_LPAREN MK_RPAREN MK_LBRACE block MK_RBRACE .

    $default  reduce using rule 10 (function_decl)


state 154

   19 block: decl_list stmt_list .
   54 stmt_list: stmt_list . stmt

    ID            shift, and go to state 155
    IF            shift, and go to state 108
    WHILE         shift, and go to state 109
    FOR           shift, and go to state 110
    MK_LBRACE     shift, and go to state 111
    MK_SEMICOLON  shift, and go to state 112
    RETURN        shift, and go to state 113

    $default  reduce using rule 19 (block)

    stmt     go to state 156
    var_ref  go to state 119


state 155

  107 var_ref: ID .
  108        | ID . dim_list

    MK_LB  shift, and go to state 73

    $default  reduce using rule 107 (var_ref)

    dim_list  go to state 75


state 156

   54 stmt_list: stmt_list stmt .

    $default  reduce using rule 54 (stmt_list)


state 157

   59 stmt: var_ref OP_ASSIGN . relop_expr MK_SEMICOLON

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    relop_expr    go to state 181
    relop_term    go to state 50
    relop_factor  go to state 51
    expr          go to state 52
    term          go to state 53
    factor        go to state 54
    unary_op      go to state 55
    var_ref       go to state 56


state 158

   62 stmt: var_ref MK_LPAREN . relop_expr_list MK_RPAREN MK_SEMICOLON

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    $default  reduce using rule 85 (relop_expr_list)

    relop_expr                go to state 126
    relop_term                go to state 50
    relop_factor              go to state 51
    relop_expr_list           go to state 182
    nonempty_relop_expr_list  go to state 128
    expr                      go to state 52
    term                      go to state 53
    factor                    go to state 54
    unary_op                  go to state 55
    var_ref                   go to state 56


state 159

    8 function_decl: VOID ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block . MK_RBRACE

    MK_RBRACE  shift, and go to state 183


state 160

   15 dim_fn: MK_LB expr_null . MK_RB

    MK_RB  shift, and go to state 184


state 161

   17 expr_null: expr .
   88 expr: expr . add_op term

    OP_PLUS   shift, and go to state 85
    OP_MINUS  shift, and go to state 86

    $default  reduce using rule 17 (expr_null)

    add_op  go to state 88


state 162

   16 dim_fn: dim_fn MK_LB . expr MK_RB

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    expr      go to state 185
    term      go to state 53
    factor    go to state 54
    unary_op  go to state 55
    var_ref   go to state 56


state 163

  110 dim_list: MK_LB expr MK_RB .

    $default  reduce using rule 110 (dim_list)


state 164

  100 factor: ID MK_LPAREN relop_expr_list MK_RPAREN .

    $default  reduce using rule 100 (factor)


state 165

   86 nonempty_relop_expr_list: nonempty_relop_expr_list MK_COMMA . relop_expr

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    relop_expr    go to state 186
    relop_term    go to state 50
    relop_factor  go to state 51
    expr          go to state 52
    term          go to state 53
    factor        go to state 54
    unary_op      go to state 55
    var_ref       go to state 56


state 166

   88 expr: expr . add_op term
  109 dim_list: dim_list MK_LB expr . MK_RB

    OP_PLUS   shift, and go to state 85
    OP_MINUS  shift, and go to state 86
    MK_RB     shift, and go to state 187

    add_op  go to state 88


state 167

  101 factor: unary_op ID MK_LPAREN relop_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 188


state 168

   97 factor: unary_op MK_LPAREN relop_expr MK_RPAREN .

    $default  reduce using rule 97 (factor)


state 169

   48 cfactor: unary_op MK_LPAREN cexpr MK_RPAREN .

    $default  reduce using rule 48 (cfactor)


state 170

    9 function_decl: type ID MK_LPAREN MK_RPAREN MK_LBRACE block MK_RBRACE .

    $default  reduce using rule 9 (function_decl)


state 171

    7 function_decl: type ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block . MK_RBRACE

    MK_RBRACE  shift, and go to state 189


state 172

   70 assign_expr: ID . OP_ASSIGN relop_expr
  100 factor: ID . MK_LPAREN relop_expr_list MK_RPAREN
  107 var_ref: ID .
  108        | ID . dim_list

    OP_ASSIGN  shift, and go to state 190
    MK_LB      shift, and go to state 73
    MK_LPAREN  shift, and go to state 74

    $default  reduce using rule 107 (var_ref)

    dim_list  go to state 75


state 173

   60 stmt: IF MK_LPAREN nonempty_assign_expr_list . MK_RPAREN stmt
   61     | IF MK_LPAREN nonempty_assign_expr_list . MK_RPAREN stmt ELSE stmt
   68 nonempty_assign_expr_list: nonempty_assign_expr_list . MK_COMMA assign_expr

    MK_RPAREN  shift, and go to state 191
    MK_COMMA   shift, and go to state 192


state 174

   69 nonempty_assign_expr_list: assign_expr .

    $default  reduce using rule 69 (nonempty_assign_expr_list)


state 175

   71 assign_expr: relop_expr .
   73 relop_expr: relop_expr . OP_OR relop_term

    OP_OR  shift, and go to state 77

    $default  reduce using rule 71 (assign_expr)


state 176

   57 stmt: WHILE MK_LPAREN nonempty_assign_expr_list . MK_RPAREN stmt
   68 nonempty_assign_expr_list: nonempty_assign_expr_list . MK_COMMA assign_expr

    MK_RPAREN  shift, and go to state 193
    MK_COMMA   shift, and go to state 192


state 177

   58 stmt: FOR MK_LPAREN assign_expr_list . MK_SEMICOLON relop_expr_list MK_SEMICOLON assign_expr_list MK_RPAREN stmt

    MK_SEMICOLON  shift, and go to state 194


state 178

   66 assign_expr_list: nonempty_assign_expr_list .
   68 nonempty_assign_expr_list: nonempty_assign_expr_list . MK_COMMA assign_expr

    MK_COMMA  shift, and go to state 192

    $default  reduce using rule 66 (assign_expr_list)


state 179

   56 stmt: MK_LBRACE block MK_RBRACE .

    $default  reduce using rule 56 (stmt)


state 180

   65 stmt: RETURN relop_expr MK_SEMICOLON .

    $default  reduce using rule 65 (stmt)


state 181

   59 stmt: var_ref OP_ASSIGN relop_expr . MK_SEMICOLON
   73 relop_expr: relop_expr . OP_OR relop_term

    OP_OR         shift, and go to state 77
    MK_SEMICOLON  shift, and go to state 195


state 182

   62 stmt: var_ref MK_LPAREN relop_expr_list . MK_RPAREN MK_SEMICOLON

    MK_RPAREN  shift, and go to state 196


state 183

    8 function_decl: VOID ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE .

    $default  reduce using rule 8 (function_decl)


state 184

   15 dim_fn: MK_LB expr_null MK_RB .

    $default  reduce using rule 15 (dim_fn)


state 185

   16 dim_fn: dim_fn MK_LB expr . MK_RB
   88 expr: expr . add_op term

    OP_PLUS   shift, and go to state 85
    OP_MINUS  shift, and go to state 86
    MK_RB     shift, and go to state 197

    add_op  go to state 88


state 186

   73 relop_expr: relop_expr . OP_OR relop_term
   86 nonempty_relop_expr_list: nonempty_relop_expr_list MK_COMMA relop_expr .

    OP_OR  shift, and go to state 77

    $default  reduce using rule 86 (nonempty_relop_expr_list)


state 187

  109 dim_list: dim_list MK_LB expr MK_RB .

    $default  reduce using rule 109 (dim_list)


state 188

  101 factor: unary_op ID MK_LPAREN relop_expr_list MK_RPAREN .

    $default  reduce using rule 101 (factor)


state 189

    7 function_decl: type ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE .

    $default  reduce using rule 7 (function_decl)


state 190

   70 assign_expr: ID OP_ASSIGN . relop_expr

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    relop_expr    go to state 198
    relop_term    go to state 50
    relop_factor  go to state 51
    expr          go to state 52
    term          go to state 53
    factor        go to state 54
    unary_op      go to state 55
    var_ref       go to state 56


state 191

   60 stmt: IF MK_LPAREN nonempty_assign_expr_list MK_RPAREN . stmt
   61     | IF MK_LPAREN nonempty_assign_expr_list MK_RPAREN . stmt ELSE stmt

    ID            shift, and go to state 155
    IF            shift, and go to state 108
    WHILE         shift, and go to state 109
    FOR           shift, and go to state 110
    MK_LBRACE     shift, and go to state 111
    MK_SEMICOLON  shift, and go to state 112
    RETURN        shift, and go to state 113

    stmt     go to state 199
    var_ref  go to state 119


state 192

   68 nonempty_assign_expr_list: nonempty_assign_expr_list MK_COMMA . assign_expr

    ID         shift, and go to state 172
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    assign_expr   go to state 200
    relop_expr    go to state 175
    relop_term    go to state 50
    relop_factor  go to state 51
    expr          go to state 52
    term          go to state 53
    factor        go to state 54
    unary_op      go to state 55
    var_ref       go to state 56


state 193

   57 stmt: WHILE MK_LPAREN nonempty_assign_expr_list MK_RPAREN . stmt

    ID            shift, and go to state 155
    IF            shift, and go to state 108
    WHILE         shift, and go to state 109
    FOR           shift, and go to state 110
    MK_LBRACE     shift, and go to state 111
    MK_SEMICOLON  shift, and go to state 112
    RETURN        shift, and go to state 113

    stmt     go to state 201
    var_ref  go to state 119


state 194

   58 stmt: FOR MK_LPAREN assign_expr_list MK_SEMICOLON . relop_expr_list MK_SEMICOLON assign_expr_list MK_RPAREN stmt

    ID         shift, and go to state 43
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    $default  reduce using rule 85 (relop_expr_list)

    relop_expr                go to state 126
    relop_term                go to state 50
    relop_factor              go to state 51
    relop_expr_list           go to state 202
    nonempty_relop_expr_list  go to state 128
    expr                      go to state 52
    term                      go to state 53
    factor                    go to state 54
    unary_op                  go to state 55
    var_ref                   go to state 56


state 195

   59 stmt: var_ref OP_ASSIGN relop_expr MK_SEMICOLON .

    $default  reduce using rule 59 (stmt)


state 196

   62 stmt: var_ref MK_LPAREN relop_expr_list MK_RPAREN . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 203


state 197

   16 dim_fn: dim_fn MK_LB expr MK_RB .

    $default  reduce using rule 16 (dim_fn)


state 198

   70 assign_expr: ID OP_ASSIGN relop_expr .
   73 relop_expr: relop_expr . OP_OR relop_term

    OP_OR  shift, and go to state 77

    $default  reduce using rule 70 (assign_expr)


state 199

   60 stmt: IF MK_LPAREN nonempty_assign_expr_list MK_RPAREN stmt .
   61     | IF MK_LPAREN nonempty_assign_expr_list MK_RPAREN stmt . ELSE stmt

    ELSE  shift, and go to state 204

    ELSE      [reduce using rule 60 (stmt)]
    $default  reduce using rule 60 (stmt)


state 200

   68 nonempty_assign_expr_list: nonempty_assign_expr_list MK_COMMA assign_expr .

    $default  reduce using rule 68 (nonempty_assign_expr_list)


state 201

   57 stmt: WHILE MK_LPAREN nonempty_assign_expr_list MK_RPAREN stmt .

    $default  reduce using rule 57 (stmt)


state 202

   58 stmt: FOR MK_LPAREN assign_expr_list MK_SEMICOLON relop_expr_list . MK_SEMICOLON assign_expr_list MK_RPAREN stmt

    MK_SEMICOLON  shift, and go to state 205


state 203

   62 stmt: var_ref MK_LPAREN relop_expr_list MK_RPAREN MK_SEMICOLON .

    $default  reduce using rule 62 (stmt)


state 204

   61 stmt: IF MK_LPAREN nonempty_assign_expr_list MK_RPAREN stmt ELSE . stmt

    ID            shift, and go to state 155
    IF            shift, and go to state 108
    WHILE         shift, and go to state 109
    FOR           shift, and go to state 110
    MK_LBRACE     shift, and go to state 111
    MK_SEMICOLON  shift, and go to state 112
    RETURN        shift, and go to state 113

    stmt     go to state 206
    var_ref  go to state 119


state 205

   58 stmt: FOR MK_LPAREN assign_expr_list MK_SEMICOLON relop_expr_list MK_SEMICOLON . assign_expr_list MK_RPAREN stmt

    ID         shift, and go to state 172
    CONST      shift, and go to state 44
    OP_NOT     shift, and go to state 45
    OP_PLUS    shift, and go to state 46
    OP_MINUS   shift, and go to state 47
    MK_LPAREN  shift, and go to state 48

    $default  reduce using rule 67 (assign_expr_list)

    assign_expr_list           go to state 207
    nonempty_assign_expr_list  go to state 178
    assign_expr                go to state 174
    relop_expr                 go to state 175
    relop_term                 go to state 50
    relop_factor               go to state 51
    expr                       go to state 52
    term                       go to state 53
    factor                     go to state 54
    unary_op                   go to state 55
    var_ref                    go to state 56


state 206

   61 stmt: IF MK_LPAREN nonempty_assign_expr_list MK_RPAREN stmt ELSE stmt .

    $default  reduce using rule 61 (stmt)


state 207

   58 stmt: FOR MK_LPAREN assign_expr_list MK_SEMICOLON relop_expr_list MK_SEMICOLON assign_expr_list . MK_RPAREN stmt

    MK_RPAREN  shift, and go to state 208


state 208

   58 stmt: FOR MK_LPAREN assign_expr_list MK_SEMICOLON relop_expr_list MK_SEMICOLON assign_expr_list MK_RPAREN . stmt

    ID            shift, and go to state 155
    IF            shift, and go to state 108
    WHILE         shift, and go to state 109
    FOR           shift, and go to state 110
    MK_LBRACE     shift, and go to state 111
    MK_SEMICOLON  shift, and go to state 112
    RETURN        shift, and go to state 113

    stmt     go to state 209
    var_ref  go to state 119


state 209

   58 stmt: FOR MK_LPAREN assign_expr_list MK_SEMICOLON relop_expr_list MK_SEMICOLON assign_expr_list MK_RPAREN stmt .

    $default  reduce using rule 58 (stmt)
